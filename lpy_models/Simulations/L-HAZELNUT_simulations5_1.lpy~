#import library from python
from numpy.random import *
from math import *
import random
import pandas as pd
import numpy
from datetime import *
from openalea import *
import os
import warnings
import random as rd


#variable to stop the random simulations
seed(SEED)

#function for the relationship between length in cm and length in 
def shootnbnodesfromlength_proba(length):
  mean = 1.81062*(length**0.57449)
  std = 1.081
  return mean, std

#gaussian distribution
def shootnbnodesfromlength(length):
  if length == 0:
    value = nan
    return (nan)
  else:
    mean = shootnbnodesfromlength_proba(length)[0]
    std = shootnbnodesfromlength_proba(length)[1]
    value = numpy.random.normal(loc = mean, scale = std)
    while value < min_nodes or value > max_nodes:
      value = numpy.random.normal(loc = mean, scale = std)
  return int (value)

#probability to have sylleptic (MOD1)
def has_sylleptic_proba(norm_distance_abs):
   ec = exp(-0.2711-4.5303*norm_distance_abs)
   proba = ec/(1+ec)
   return proba

#binomial function for probability of having sylleptic(MOD1)
def has_sylleptic(norm_distance_abs):
   proba = has_sylleptic_proba(norm_distance_abs)
   return bool(binomial(1,proba,1)[0])

#SYLLEPTIC
#number of buds inside sylleptic shoots
def nb_mv_in_sylleptic_lambda(length, norm_distance_abs):
  latent = 0.806471 + 0.011091 * length - 1.971983 * norm_distance_abs
  return exp(latent)

#poisson function for number of buds inside sylleptic shoots
def nb_mv_in_sylleptic(length, norm_distance_abs):
  if length > 0:
    lambda_ = nb_mv_in_sylleptic_lambda(length, norm_distance_abs)
    return int(max(1,int(poisson(lambda_,1)[0])))
  else :
    return nan

#probability of bursting in sylleptic shoots (MOD4)
def burst_in_sylleptic_proba(nb_siblings_V, nb_siblings_M, fate='V'):
  latent = 1.2464 -0.5799*nb_siblings_V 
  if fate == 'M': latent += -0.7439*nb_siblings_M -0.3292*nb_siblings_V
  ec = exp(latent)
  proba = ec/(1+ec)
  return proba

#binomial function for probability pf bursting inside sylleptic(MOD4)
def burst_in_sylleptic(nb_siblings_V, nb_siblings_M, fate='V'):
   proba = burst_in_sylleptic_proba(nb_siblings_V, nb_siblings_M, fate)
   return bool(binomial(1,proba,1)[0])

#gamma dist number of nodes of new shoots(MOD5)
def length_new_in_sylleptic():  
  leng=numpy.random.gamma(shape=2.376818, scale=1/1.197655)
  while leng <= 0:
    leng=numpy.random.gamma(shape=2.376818, scale=1/1.197655)
  return round(leng,2)

#PROLEPTIC

#nb_buds in proleptic
def nb_mvb_in_proleptic_lambda():
  return exp(0.1061)

#poisson function for number of buds inside proleptic shoots
def nb_mvb_in_proleptic():
  proba = nb_mvb_in_proleptic_lambda()
  res = int( max(1,int(poisson(proba,1)[0])))
  while res < 0:
    res = int( max(1,int(poisson(proba,1)[0])))
  return res 
  
#bud type in proleptic shoots(MOD2)
def bud_type_in_proleptic(rank, nb_buds):
  name=["V","B","M"]
  coefs = [0.,28.109405+44.244359*rank-66.9705830*rank**(0.5)-6.62976360*rank**(2)+0.623165597*rank**(3)-0.0221203157*rank**(4),-1.342972+0.140585*rank+0.1448854*rank**(0.5)+0.06661479*rank**(2)-0.008611708*rank**(3)+0.0002449118*rank**(4)]
  probas = numpy.exp(coefs)/sum(numpy.exp(coefs))
  #l'output ? un' array con il numero di [V, B, M]
  nbs = numpy.random.multinomial(nb_buds,probas)
  if nbs[1] > 0: return ["B"]
  else: 
    buds=nbs[0]*[name[0]]+nbs[2]*[name[2]]
    shuffle(buds)
    return buds

#probability of bursting in proleptic shoots (MOD3)
def burst_in_proleptic_proba(siblings_mv, norm_distance,fate='V'):
  latent = 1.9914-0.09149*siblings_mv+2.9827*norm_distance
  if fate == 'M': 
    latent += -0.8290*siblings_mv +2.3983*norm_distance
  odd = exp(latent)
  proba = odd/(1+odd)
  return proba

#binomial function for probability of bursting in proleptic(MOD3)
def burst_in_proleptic(siblings_mv, norm_distance,fate='V'):
   proba = burst_in_proleptic_proba(siblings_mv, norm_distance,fate='V')
   return bool(binomial(1,proba,1)[0])

#length of new shoots(MOD6)
def length_new_in_proleptic_proba(length,norm_distance, fate='V'):
  mean=1.252965+0.067470*length+6.256609*norm_distance
  if fate =='M': 
    mean += 0.039516*length+1.455136*norm_distance
  std = sqrt(8.516455)
  return mean, std
  
def length_new_in_proleptic(length,norm_distance, fate='V'):
  if length > 0:
    mean = length_new_in_proleptic_proba(length,norm_distance, fate='V')[0]
    std = length_new_in_proleptic_proba(length,norm_distance, fate='V')[1]
    value = numpy.random.normal(loc = mean, scale = std)
    while value < 0:
      value = numpy.random.normal(loc = mean, scale = std)
    return round(float(value),2)
  else:
    return nan

#CLUSTERS(proleptic and sylleptic)
def have_clusters_proba(length, siblings_mv,norm_distance_abs):
  latent = 0.025647*length-0.630249*siblings_mv-2.083325*norm_distance_abs
  ec = exp(latent)
  proba = ec/(1+ec)
  return proba
  
def have_clusters(length, siblings_mv,norm_distance_abs):
  if length > 0:
    proba = have_clusters_proba(length, siblings_mv,norm_distance_abs)
    return bool(binomial(1,proba,1)[0])
  else :
    return False
    
#NUTS(proleptic and sylleptic)
def number_nuts_lambda(norm_distance):
  latent = 1.0277 + 0.5728 * norm_distance
  return exp(latent)
  
def number_nuts(norm_distance):
  lambda_= number_nuts_lambda(norm_distance)
  value = max (1,int(poisson(lambda_,1)[0]))
  while value < 0:
    value = max (1,int(poisson(lambda_,1)[0]))
  return int(value)
 
#DIAMETER
#function for the relationship between diameter in mm and length in cm
def diameter_proba(length):
  mean = 0.152679*(length**0.37395)
  std = 0.05933
  return mean, std
    
def diameter(length):
  if length	<=0:
    value = nan
    return value
  else :
    mean = diameter_proba(length)[0]
    std = diameter_proba(length)[1]
    value = numpy.random.normal(loc = mean, scale = std)
    while value < 0:
      value = numpy.random.normal(loc = mean, scale = std)
    return round(float(value),2)

#JUVENILITY
def length_new_juven_proba(length,norm_distance):
  mean= 0.07*length+87.60*norm_distance
  std =sqrt(100.63)
  return mean, std

def length_new_juven(length,norm_distance):
  if length > 0:
    mean = length_new_juven_proba(length,norm_distance)[0]
    std = length_new_juven_proba(length,norm_distance)[1]
    value = normal(loc = mean, scale = std)
    while value <= 0:
      value = normal(loc = mean, scale = std)
    return round(float(value),2)
  else :
    return nan
    
#CATEGORIZZAZIONE
def cat_length(length):
  if length <= 5.0:
    cat = "Sh"
    return cat
  if length > 5.0 and length <= 20.0:
    cat = "Me"
    return cat
  if length > 20.0 and length <= 40.0:
    cat = "Lo"
    return cat
  if length > 40.0:
    cat = "VLo"
  return cat

def StartEach():#non toccare MAI
  global current_date, draw
  current_date += 1
  draw=0

#count number of nuts
nbnuts = None

def EndEach(lstring):
  global nbnuts, draw
  draw = 1
  nbnuts = 0
  for i,mod in enumerate(lstring):
    if mod.name == "Nut":
      nbnuts += 1

def End():
  global prol_buds
  if EXPORT_DATAFRAME:
    prol_buds = pd.DataFrame(_prol_buds)

#we have to define the module we use
module ProlBud
module SylBud
module Internode
module Nut
module Catkin
module Leaf

#date
current_date = 2018
endjuvenility = 2020 # giovanilita'
last_year = 2021 #set a variable to finish

deriv_len=(last_year-current_date)

phyllotaxy = 137.5

#initial parent shoot's parameters
init_p_len =100.0
init_p_diam = 1.0

#current shoot's parameter
leng = 80.0
rank=0.
max_nodes = 23
min_nodes= 1
diam_bud = 0.42

id = 1
EXPORT_DATAFRAME = True
if EXPORT_DATAFRAME:
  prol_buds = None
  _prol_buds = {"bud_id": [],"year":[],"shoot_id":[],"length_cm" : [],"cat":[],"nodes":[],"rank": [],"fate":[],"clusters":[], "nuts":[], "new_length_cm" :[],"new_cat":[], "new_nodes":[]}
  
  def add_prol_bud_info(bud_id = nan, year = nan, shoot_id = nan, length_cm = nan, cat = nan, nodes = nan, rank = nan, fate = nan, clusters = nan, nuts = nan, new_length_cm = nan, new_cat = nan, new_nodes = nan):
    for name, value in zip(['bud_id',  'year', 'shoot_id', 'length_cm', 'cat', 'nodes', 'rank', 'fate', 'clusters', 'nuts', 'new_length_cm', 'new_cat', 'new_nodes'], [bud_id, year, shoot_id, length_cm, cat, nodes, rank, fate, clusters, nuts, new_length_cm, new_cat, new_nodes]):
      _prol_buds[name].append(value)
      
  def set_prol_bud_info(bud_id, **info):
    lineid = _prol_buds['bud_id'].index(bud_id)
    for name, value in info.items():
      _prol_buds[name][lineid] = value

  def get_prol_bud_info(bud_id):
    lineid = _prol_buds['bud_id'].index(bud_id)
    result = {}
    for name, values in _prol_buds.items():
      result[name] = values[lineid]
    return result

#per disegnare solo quando inizia ogni step
draw=0

#starter
Axiom: 
  global prol_buds, id, id_line
  diam = diameter(leng)
  new_nodes = shootnbnodesfromlength(leng)
  p_cat = cat_length(init_p_len)
  init_nodes = 10
  nproduce Info_(init_p_diam) StartGC() Tropism(0,0,-1) Internode(40.,init_p_diam,current_date, 'P',rank)
  for i in range(1, init_nodes+1):
    if EXPORT_DATAFRAME:
      new_cat = cat_length(leng)
      
      add_prol_bud_info(id, current_date, 0, init_p_len, p_cat, init_nodes,init_nodes, "V",nan,nan,leng, new_cat, new_nodes)
    pn = ParameterSet(bud_id = id, new_length = leng,new_nodes = new_nodes, new_diameter = diam, time = current_date+1, mixed_bud = False, sh_type = 'P')
    id += 1
    angle = rd.randint(90,125)
    nproduce /((360/init_nodes))[&(angle)D(init_p_diam + diam_bud)&(-60)Elasticity(0.0001) ProlBud(pn)]

derivation length: deriv_len

production:

ProlBud(p):
  warnings.simplefilter(action = "ignore", category = FutureWarning)
  
  global prol_buds, id, id_line
  shoot_id = p.bud_id
  leng = p.new_length
  nbnodes = p.new_nodes
  diam = p.new_diameter
  
  cat = cat_length(leng)
  year = p.time
  if year <= current_date:
    
    if ((nbnodes < min_nodes) | (isnan(nbnodes))):
      nproduce [BlindNode()]
    else:
      internodelength = round(leng/float(nbnodes),2)
      midrank = (nbnodes+1)/2
      #juvenility: 
      if year < endjuvenility:
        for rank in range(1,nbnodes+1):
          rank_to_mid =(rank-midrank)
          norm_distance= round(rank_to_mid/float(nbnodes),2)
          bangle = round(60 * (1.3- rank/nbnodes),2)
          
          new_len= length_new_juven(leng,norm_distance)
          new_nodes = shootnbnodesfromlength(new_len)	
          new_diam = diameter(new_len)
          new_cat = cat_length(new_len)
          
          nproduce /(phyllotaxy) Internode(internodelength, diam, year, 'P',rank)[&(40) Leaf()]
          if rank >= (midrank)/3:
            if EXPORT_DATAFRAME:
              add_prol_bud_info(id, year, shoot_id,leng, cat, nbnodes,rank, "V",nan,nan,new_len,new_cat,new_nodes)
            pn = ParameterSet(bud_id = id, new_length = new_len, new_nodes = new_nodes, new_diameter = new_diam, time = year+1, mixed_bud = False,sh_type ='P')
            id = id + 1
            nproduce [&(bangle)D(diam+diam_bud),(5)ProlBud(pn)]
          else :
            if EXPORT_DATAFRAME:
               add_prol_bud_info(id, year, shoot_id, leng, cat, nbnodes, rank, "B",nan,nan,nan,nan,nan)
            nproduce [BlindNode()]
            id = id + 1
                  #production phase      
      else:
        for rank in range(1,nbnodes+1):
          nproduce /(phyllotaxy) Internode(internodelength, diam, year, 'P',rank) [&(40) Leaf()]
          
          bangle = round(60 * (1.3- rank/nbnodes),2)
          rank_to_mid =(rank-midrank)
          norm_distance = round(rank_to_mid/float(nbnodes),2)
          norm_distance_abs = round(abs(norm_distance),2)
          
          #is sylleptic?
          sylleptic = has_sylleptic(norm_distance_abs)
          if sylleptic:
            if EXPORT_DATAFRAME:
               add_prol_bud_info(id, year, shoot_id, leng, cat, nbnodes,rank, "S",0,0,nan,nan,nan)
            syl_length = 3.
            
            defdiam_syl = diameter(syl_length)
            nb_mv = nb_mv_in_sylleptic(leng, norm_distance_abs)
            #disegna il sillettico
            nproduce [&(bangle)D(defdiam_syl)SylBud(ParameterSet(index = id,s_rank = rank,proleptic_length = leng, prol_norm_dist = norm_distance, sylleptic_len = syl_length, sylleptic_buds = nb_mv,time = year,dr = draw))]
            id += 1
          else:
            norm_distance = rank_to_mid/float(nbnodes)
            nb_buds = nb_mvb_in_proleptic()
            siblings_mv = nb_buds-1
            fate = bud_type_in_proleptic(rank, nb_buds)
            
            for ibud in fate:
              if ibud == 'B':
                if EXPORT_DATAFRAME:
                  add_prol_bud_info(id, year, shoot_id, leng, cat, nbnodes,rank, "B",nan,nan,nan,nan,nan)
                nproduce [BlindNode()]
                id = id + 1
              #vegetative
              else :
                if ibud =='V':
                  if burst_in_proleptic(siblings_mv, norm_distance, ibud):                    
                    new_len = length_new_in_proleptic(leng,norm_distance, ibud)
                    new_cat = cat_length(new_len)	
                    new_diam = diameter(new_len)
                    new_nodes = shootnbnodesfromlength(new_len)
                    if EXPORT_DATAFRAME:
                      add_prol_bud_info(id, year, shoot_id, leng, cat, nbnodes,rank, "V",nan,nan,new_len,new_cat,new_nodes)                  
                    pn = ParameterSet(bud_id = id, new_length = new_len, new_nodes = new_nodes, new_diameter = new_diam, time = year+1, mixed_bud = False,sh_type ='P') 
                    nproduce [D(diam+diam_bud)&(bangle),(5)ProlBud(pn)]
                    id = id + 1
                  else:             
                    if EXPORT_DATAFRAME:
                       add_prol_bud_info(id, year, shoot_id, leng, cat, nbnodes,rank, "V",nan,nan,nan,nan,nan)        
                    nproduce [BlindNode()]
                    id = id + 1
                #mixed
                elif ibud == 'M':
                  if burst_in_proleptic(siblings_mv, norm_distance, ibud):
                    new_len = length_new_in_proleptic(leng,norm_distance, ibud)
                    new_cat = cat_length(new_len)	
                    new_diam = diameter(new_len)
                    new_nodes = shootnbnodesfromlength(new_len)
                    pn = ParameterSet(bud_id = id, new_length = new_len, new_nodes = new_nodes, new_diameter = new_diam, time = year+1, mixed_bud = True,sh_type ='P')
                    
                    nproduce [D(diam+diam_bud)&(bangle),(6)ProlBud(pn)]
                    cluster = have_clusters(leng,siblings_mv,norm_distance_abs)
                    nb_nuts = 0
                    if cluster:
                      nb_nuts = number_nuts(norm_distance)
                      for nuts in range(1,nb_nuts):
                        #l'anno dopo nocciola
                        nproduce /45[/(360/nb_nuts)&(bangle)Nut(year,'P',draw)]
                    if EXPORT_DATAFRAME:
                      add_prol_bud_info(id, year, shoot_id, leng, cat, nbnodes,rank, "M",1 if cluster else 0,nb_nuts,new_len,new_cat,new_nodes)                  
                    id = id + 1                   
                  else:
                    if EXPORT_DATAFRAME:
                       add_prol_bud_info(id, year, shoot_id, leng, cat, nbnodes,rank, "M",nan,nan,nan,nan,nan)                
                    nproduce [BlindNode()]
                    id = id + 1


decomposition:

SylBud(s):
  #id_line = s.id_line
  id = s.index
  syl_length = s.sylleptic_len
  nb_mv = s.sylleptic_buds
  ranks = s.s_rank    
  prol_norm_dist = s.prol_norm_dist
  year = s.time
  parent_length = s.proleptic_length
  
  cat = cat_length(syl_length)
  internodelength = round(syl_length/(nb_mv+1),2)
  nb_v = int(ceil(nb_mv*0.52))
  nb_m = (nb_mv-nb_v)
  
  #create a list as: VVMMVM
  buds = ['V']*nb_v+['M']*nb_m
  #shuffle the list
  shuffle(buds)
  defdiam_syl = diameter(syl_length)
  
  nbnodes = len(buds)
  #median rank 
  midrank = (nbnodes+1)/2
  nproduce /(360/len(buds))
  nproduce /(phyllotaxy)Internode(internodelength, defdiam_syl,year, 'S',ranks)[&(40) Leaf()]
  for rank,b in enumerate(buds,1):
    rank_to_mid =(rank-midrank)
    norm_distance_abs=abs(rank_to_mid/float(nbnodes))
    bangle = round(60 * (1.3- rank/nbnodes),2)
    
    if b == 'V':
      nb_siblings_V = nb_v-1
      if burst_in_sylleptic(nb_siblings_V, nb_m, b):
        new_len = length_new_in_sylleptic()
        new_diam = diameter(new_len)
        new_nodes = shootnbnodesfromlength(new_len)
        
        pn = ParameterSet(bud_id = id, new_length = new_len, new_nodes = new_nodes, new_diameter = new_diam, time = year+1, mixed_bud = False,sh_type ='S') 
        nproduce [D(defdiam_syl + diam_bud)&(bangle),(5)ProlBud(pn)]
    elif b == 'M' :
      nb_siblings_M=nb_m-1
      if burst_in_sylleptic(nb_v, nb_siblings_M, b):
        new_len = length_new_in_sylleptic()
        new_diam = diameter(new_len)
        new_nodes = shootnbnodesfromlength(new_len)
        
        pn = ParameterSet(bud_id = id, new_length = new_len, new_nodes = new_nodes, new_diameter = new_diam, time = year+1, mixed_bud = True,sh_type ='S') 
        nproduce [D(defdiam_syl + diam_bud)&(bangle),(5)ProlBud(pn)]
        siblings_mv = nb_siblings_M+nb_v
        cluster = have_clusters(parent_length,siblings_mv,norm_distance_abs)
        if cluster:
          nb_nuts = number_nuts(prol_norm_dist)
          if EXPORT_DATAFRAME:
             preinfo = get_prol_bud_info(id)
             set_prol_bud_info(id, clusters=preinfo['clusters']+1, nuts=preinfo['nuts']+nb_nuts)
          for nuts in range(1,nb_nuts):
            #l'anno dopo nocciola
            nproduce /45[/(360/nb_nuts)&(bangle)Nut('S',draw)] 
  nproduce /(phyllotaxy) Internode(internodelength, defdiam_syl,year, 'S',ranks) Catkin(1)

interpretation:

Info --> [@2D @M(0.6,0.8)+ @L("end of season year "+str(current_date)+" "+str(getIterationNb())+ " " + "tot_nuts="+ str(nbnuts))]

Internode(l,d,current_date,t,rank) :
  cmap = {'P' : 1, 'S' : 2}
  produce ,(cmap[t])_(d)nF(l,d)f(0.01)

D(d) --> f(d)

Nut(t,draw) :
  cmap = {'P' : 7, 'S' : 6}
  if t == 'P' and NUTSY and draw == 0:
    produce _(0.2)@Tp(0,0,-1) @Ts(0.2)nF(3,0.22),(cmap[t])f(1)@O(1)

Leaf() :
  if LEAFY:
    produce ,(2)@g(leafshape, 8)

Catkin(draw) :
  if draw == 0:
    nproduce EndGC _(0.2),(4) @Tp(0,0,-1) @Ts(0.2) StartGC [nF(5,0.2)][+(30)nF(5,0.2)][-(30)nF(5,0.2)]
    
BlindNode()-->f(0.01)
ProlBud(p):
  cmap = {False : 2, True : 6}
  produce ,(cmap[p.mixed_bud])@O(diam_bud)

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_1 = pgl.Material("Color_1" , ambient = (48,33,11) , diffuse = 1.60417 , )
	Color_1.name = "Color_1"
	context.turtle.setMaterial(1,Color_1)
	Color_7 = pgl.Material("Color_7" , ambient = (65,45,15) , diffuse = 3 , )
	Color_7.name = "Color_7"
	context.turtle.setMaterial(7,Color_7)
	context.animation_timestep = 0.5
	scalars = [('LEAFY', 'Bool', False), ('NUTSY', 'Bool', False), ('SEED', 'Integer', 3, 0, 100)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	leafshape = pgl.NurbsPatch(	
	    pgl.Point4Matrix([[(0.0219507, -0.0897315, -0.0142612, 1), (0.00391438, -0.0676957, -0.00575523, 1), (-0.0170473, -0.0414044, -0.00268306, 1), (-0.0427501, -0.023424, -0.00652478, 1)], [(0, -0.5, 0.157176, 1), (0, -0.166667, 0.157176, 1), (0, 0.166667, 0.157176, 1), (0.00136282, 0.499585, 0.159513, 1)], [(0.063963, -0.438398, 0.238403, 1), (0.00109578, -0.187242, 0.25516, 1), (-0.00670301, 0.144488, 0.246423, 1), (0.0684813, 0.419615, 0.263648, 1)], [(0.132471, -0.526697, 0.321615, 1), (0.0184936, -0.20428, 0.344984, 1), (-0.00281193, 0.121747, 0.356544, 1), (0.141443, 0.5, 0.333333, 1)], [(0.048992, -0.462259, 0.494815, 1), (0.0289511, -0.185331, 0.502717, 1), (0.048992, 0.204407, 0.494815, 1), (0.0393662, 0.363871, 0.500317, 1)], [(0.0683741, -0.49623, 0.661962, 1), (0.0301094, -0.178389, 0.661372, 1), (0.0217253, 0.15344, 0.649333, 1), (0.0736795, 0.520788, 0.668738, 1)], [(0.0221824, -0.0576137, 0.98213, 1), (-0.00531401, -0.0542713, 0.977103, 1), (-0.0143594, -0.0558759, 1.00362, 1), (-0.0326793, -0.00255448, 1.00776, 1)]]) , 
	    )
	leafshape.name = "leafshape"
	panel_0 = ({'name': 'Panel 3', 'active': True, 'visible': False},[('NurbsPatch',leafshape)])
	parameterset = [panel_0,]
	context["__functions__"] = []
	context["__curves__"] = []
	context["__parameterset__"] = parameterset
	context["leafshape"] = leafshape
__references__ = '#'
