library(gridExtra);library(grid);library(data.table)
source("Own_rooted_young/Scripts/Modify_dataset/import_dataset_OR.R")
#AIM1:create a metamer level dataset
#AIM2: type of shoot (SYLLEPTIC or PROLEPTIC) where the metamer comes from
#AIM3:save a dataframe, at the metamer level, with just the shoots that were found in 2021
#author: Francesca Grisafi
#year: 2022
library(janitor);library(readxl);library(dplyr);library(plyr)
source("Own_rooted_young/Scripts/Modify_dataset/1_create_shootlevel_OR.R")
new_shoots = read_excel("../../Data/2021Inne_autor.xlsx",.name_repair = make_clean_names,sheet = "2021DFAUTO")
new_shoots = read_excel("../Data/2021Inne_autor.xlsx",.name_repair = make_clean_names,sheet = "2021DFAUTO")
shoot = read_excel("Data/2020Inne_autor.xlsx",.name_repair = make_clean_names,sheet = "Own_rooted_young")
shoot = read_excel("/Data/2020Inne_autor.xlsx",.name_repair = make_clean_names,sheet = "Own_rooted_young")
shoot = read_excel("../Data/2020Inne_autor.xlsx",.name_repair = make_clean_names,sheet = "Own_rooted_young")
dirname(getwd())
shoot = read_excel("L-HAZELNUT/Data/2020Inne_autor.xlsx",.name_repair = make_clean_names,sheet = "Own_rooted_young")
shoot = read_excel("L-HAZELNUT/Own_rooted_young/Data/2020Inne_autor.xlsx",.name_repair = make_clean_names,sheet = "Own_rooted_young")
shoot = read_excel("C:/Users/franc/Desktop/Ricerca/Progetti/L-HAZELNUT/L-HAZELNUT/Own_rooted_young/Data/2020Inne_autor.xlsx",.name_repair = make_clean_names,sheet = "Own_rooted_young")
shoot=data.frame(shoot)
str(shoot)
shoot$class=factor(shoot$class,levels = c("Sh","Me","Lo","VLo"))
names(shoot)
source("C:/Users/franc/Desktop/Ricerca/Progetti/L-HAZELNUT/L-HAZELNUT/Own_rooted_young/Scripts/Modify_dataset/1_create_shootlevel_OR.R")
source("C:/Users/franc/Desktop/Ricerca/Progetti/L-HAZELNUT/L-HAZELNUT/Own_rooted_young/Scripts/Modify_dataset/1_create_shootlevel_OR.R")
new_shoots = read_excel("../Data/2021Inne_autor.xlsx",.name_repair = make_clean_names,sheet = "2021DFAUTO")
new_shoots = read_excel("C:/Users/franc/Desktop/Ricerca/Progetti/L-HAZELNUT/L-HAZELNUT/Own_rooted_young/Data/2021Inne_autor.xlsx",.name_repair = make_clean_names,sheet = "2021DFAUTO")
new_shoots=data.frame(new_shoots)
str(new_shoots)
new_shoots$class=factor(new_shoots$class,levels = c("Sh","Me","Lo","VLo"))
names(new_shoots)
names(new_shoots)[c(18:24)]=c("nb_nodes_new", "c_new", "v_new", "m_new", "cic_new", "cl_new", "b_new")
new_shoots = dplyr::mutate(new_shoots, "tot_buds_m+v+b+c" = NA, .after = b_new)
new_shoots = dplyr::mutate(new_shoots, "nu_new" = NA, .after = cl_new)
new_shoots[new_shoots$length2yo==0, "length2yo"] = NA
start_col = grep("x2y_o_node$", colnames(new_shoots))
colnames(new_shoots)
for (i in 1:nline) {
df = droplevels(new_shoots[i,])
nb_nodes = NA
nb_c = NA
nb_v = NA
nb_m = NA
nb_cl = NA
nb_nu = NA
nb_b = NA
start_col = grep("x2y_o_node$", colnames(new_shoots))
fin_col = grep("b_3$", colnames(new_shoots))
for (j in 1:rep) {
dt = df[start_col:fin_col]
if (!is.na(dt[1])){
nb_nodes = sum(nb_nodes , 1, na.rm = T)
}
if (!is.na(dt[2])) {
if (dt[2]==0){
nb_c = sum(nb_c, as.numeric(dt[2]), na.rm = T)
nb_v = sum(nb_v, as.numeric(dt[3]), na.rm = T)
nb_m = sum(nb_m, as.numeric(dt[4]), na.rm = T)
nb_cl = sum(nb_cl, as.numeric(dt[6]), na.rm = T)
nb_nu = sum(nb_nu, as.numeric(dt[7]), na.rm = T)
nb_b = sum(nb_b, as.numeric(dt[8]), na.rm = T)
}
if (dt[2]>0) {
nb_c = sum(nb_c, length(dt[2]), na.rm = T)
}
}
new_shoots[i,c("nb_nodes_new","c_new","v_new","m_new","cl_new","nu_new","b_new")]=c(nb_nodes, nb_c,nb_v,nb_m,nb_cl,nb_nu,nb_b)
start_col = fin_col + 1
fin_col = start_col + (len_col-1)
}
new_shoots[i, "tot_buds_m+v+b+c"] = sum(new_shoots[i, "c_new"],new_shoots[i, "v_new"],
new_shoots[i, "m_new"],new_shoots[i, "b_new"], na.rm = T)#sum of obs
}
start_col = grep("x2y_o_node$", colnames(new_shoots))
fin_col = grep("b_3$", colnames(new_shoots))
len_col = (fin_col-start_col)+1
#making the sum of nodes, #catkins,mixed,veg,blind,nuts,cluster per new_shoots
nline = length(new_shoots$shoot1yo)
rep = (ncol(new_shoots)-(start_col-1))/len_col
for (i in 1:nline) {
df = droplevels(new_shoots[i,])
nb_nodes = NA
nb_c = NA
nb_v = NA
nb_m = NA
nb_cl = NA
nb_nu = NA
nb_b = NA
start_col = grep("x2y_o_node$", colnames(new_shoots))
fin_col = grep("b_3$", colnames(new_shoots))
for (j in 1:rep) {
dt = df[start_col:fin_col]
if (!is.na(dt[1])){
nb_nodes = sum(nb_nodes , 1, na.rm = T)
}
if (!is.na(dt[2])) {
if (dt[2]==0){
nb_c = sum(nb_c, as.numeric(dt[2]), na.rm = T)
nb_v = sum(nb_v, as.numeric(dt[3]), na.rm = T)
nb_m = sum(nb_m, as.numeric(dt[4]), na.rm = T)
nb_cl = sum(nb_cl, as.numeric(dt[6]), na.rm = T)
nb_nu = sum(nb_nu, as.numeric(dt[7]), na.rm = T)
nb_b = sum(nb_b, as.numeric(dt[8]), na.rm = T)
}
if (dt[2]>0) {
nb_c = sum(nb_c, length(dt[2]), na.rm = T)
}
}
new_shoots[i,c("nb_nodes_new","c_new","v_new","m_new","cl_new","nu_new","b_new")]=c(nb_nodes, nb_c,nb_v,nb_m,nb_cl,nb_nu,nb_b)
start_col = fin_col + 1
fin_col = start_col + (len_col-1)
}
new_shoots[i, "tot_buds_m+v+b+c"] = sum(new_shoots[i, "c_new"],new_shoots[i, "v_new"],
new_shoots[i, "m_new"],new_shoots[i, "b_new"], na.rm = T)#sum of obs
}
str(new_shoots)
new_shoots
start_col = grep("x2y_o_node$", colnames(new_shoots))
fin_col = grep("b_3$", colnames(new_shoots))
len_col = (fin_col-start_col)+1
start_col
fin_col
len_col
for (i in 1:nline) {
df = droplevels(new_shoots[i,])
nb_nodes = NA
nb_c = NA
nb_v = NA
nb_m = NA
nb_cl = NA
nb_nu = NA
nb_b = NA
start_col = grep("x2y_o_node$", colnames(new_shoots))
fin_col = grep("b_3$", colnames(new_shoots))
for (j in 1:rep) {
dt = df[start_col:fin_col]
print(dt)
if (!is.na(dt[1])){
nb_nodes = sum(nb_nodes , 1, na.rm = T)
}
if (!is.na(dt[2])) {
if (dt[2]==0){
nb_c = sum(nb_c, as.numeric(dt[2]), na.rm = T)
nb_v = sum(nb_v, as.numeric(dt[3]), na.rm = T)
nb_m = sum(nb_m, as.numeric(dt[4]), na.rm = T)
nb_cl = sum(nb_cl, as.numeric(dt[6]), na.rm = T)
nb_nu = sum(nb_nu, as.numeric(dt[7]), na.rm = T)
nb_b = sum(nb_b, as.numeric(dt[8]), na.rm = T)
}
if (dt[2]>0) {
nb_c = sum(nb_c, length(dt[2]), na.rm = T)
}
}
new_shoots[i,c("nb_nodes_new","c_new","v_new","m_new","cl_new","nu_new","b_new")]=c(nb_nodes, nb_c,nb_v,nb_m,nb_cl,nb_nu,nb_b)
start_col = fin_col + 1
fin_col = start_col + (len_col-1)
}
new_shoots[i, "tot_buds_m+v+b+c"] = sum(new_shoots[i, "c_new"],new_shoots[i, "v_new"],
new_shoots[i, "m_new"],new_shoots[i, "b_new"], na.rm = T)#sum of obs
}
dt[1]
dt[2]
for (i in 1:nline) {
df = droplevels(new_shoots[i,])
nb_nodes = NA
nb_c = NA
nb_v = NA
nb_m = NA
nb_cl = NA
nb_nu = NA
nb_b = NA
start_col = grep("x2y_o_node$", colnames(new_shoots))
fin_col = grep("b_3$", colnames(new_shoots))
for (j in 1:rep) {
dt = df[start_col:fin_col]
print(dt)
if (!is.na(dt[1])){
nb_nodes = sum(nb_nodes , 1, na.rm = T)
}
if (!is.na(dt[2])) {
if (dt[2]==0){
nb_c = sum(nb_c, as.numeric(dt[2]), na.rm = T)
nb_v = sum(nb_v, as.numeric(dt[3]), na.rm = T)
nb_m = sum(nb_m, as.numeric(dt[4]), na.rm = T)
nb_cl = sum(nb_cl, as.numeric(dt[6]), na.rm = T)
nb_nu = sum(nb_nu, as.numeric(dt[7]), na.rm = T)
nb_b = sum(nb_b, as.numeric(dt[8]), na.rm = T)
}
if (dt[2]>0) {
nb_c = sum(nb_c, length(dt[2]), na.rm = T)
}
}
new_shoots[i,c("nb_nodes_new","c_new","v_new","m_new","cl_new","nu_new","b_new")]=c(nb_nodes, nb_c,nb_v,nb_m,nb_cl,nb_nu,nb_b)
start_col = fin_col + 1
fin_col = start_col + (len_col-1)
}
new_shoots[i, "tot_buds_m+v+b+c"] = sum(new_shoots[i, "c_new"],new_shoots[i, "v_new"],
new_shoots[i, "m_new"],new_shoots[i, "b_new"], na.rm = T)#sum of obs
}
for (i in 1:nline) {
df = droplevels(new_shoots[i,])
nb_nodes = NA
nb_c = NA
nb_v = NA
nb_m = NA
nb_cl = NA
nb_nu = NA
nb_b = NA
start_col = grep("x2y_o_node$", colnames(new_shoots))
fin_col = grep("b_3$", colnames(new_shoots))
for (j in 1:rep) {
dt = df[start_col:fin_col]
print(dt)
if (!is.na(dt[1])){
nb_nodes = sum(nb_nodes , 1, na.rm = T)
}
if (!is.na(dt[2])) {
if (dt[2]==0){
nb_c = sum(nb_c, as.numeric(dt[2]), na.rm = T)
nb_v = sum(nb_v, as.numeric(dt[3]), na.rm = T)
nb_m = sum(nb_m, as.numeric(dt[4]), na.rm = T)
nb_cl = sum(nb_cl, as.numeric(dt[6]), na.rm = T)
nb_nu = sum(nb_nu, as.numeric(dt[7]), na.rm = T)
nb_b = sum(nb_b, as.numeric(dt[8]), na.rm = T)
}
if (dt[2]>0) {
nb_c = sum(nb_c, length(dt[2]), na.rm = T)
}
}
new_shoots[i,c("nb_nodes_new","c_new","v_new","m_new","cl_new","nu_new","b_new")]=c(nb_nodes, nb_c,nb_v,nb_m,nb_cl,nb_nu,nb_b)
start_col = fin_col + 1
fin_col = start_col + (len_col-1)
}
new_shoots[i, "tot_buds_m+v+b+c"] = sum(new_shoots[i, "c_new"],new_shoots[i, "v_new"],
new_shoots[i, "m_new"],new_shoots[i, "b_new"], na.rm = T)#sum of obs
}
i = 1
j = 1
dt = df[start_col:fin_col]
df = droplevels(new_shoots[i,])
start_col = grep("x2y_o_node$", colnames(new_shoots))
fin_col = grep("b_3$", colnames(new_shoots))
dt = df[start_col:fin_col]
print(dt)
