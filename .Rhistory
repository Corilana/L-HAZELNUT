}
#print
cols=palette()[1:nrow(unique_df)]
barplot(unique_df,beside = T,col = cols,ylim = c(0,1),,ylab = "proportion",xlab = "Rank node")
for (i in 1:ncol(unique_df)){
#test per differenze
freq = as.data.frame.matrix(freq)
freq$sum = rowSums(freq)
#are there differences between class length?
test=prop.test(freq[1:nrow(freq),i], freq[1:nrow(freq),ncol(freq)])
if (test$p.value<=0.05) {
lab = "*"
print(test)
}
if (test$p.value<=0.01){
lab = "**"
print(test)
}
if (test$p.value<=0.001){
lab = "***"
print(test)
}
if (test$p.value>0.05) {
lab = NA
print(test)
}
text(x = mean(br[,i]),y = mean(rel_freq[,i])+0.07,labels = lab, cex = 1.5)
}
legend("topright",legend = c("Observation", "576 simulations"), fill = c("grey",cols))
#proporzione nodi con rami sillettici
#2023
#francesca Grisafi
source("simulations/Rscripts/useful_functions.R")
library(plotrix);library(data.table)
# importa dataset REAL ---------------------------------------------------------
real_shoot=data.frame(fread("simulations/data/real_buds_deruta.csv",stringsAsFactors = T))
head(real_shoot)
#la scala è a livello di GEMME dobbiamo portarla a livello NODO
real_shoot = unique(real_shoot[c("length", "shoot_ID","rank_node","shoot_type")])
real_shoot$shoot_type=factor(real_shoot$shoot_type, levels = c("PROLEPTIC","SYLLEPTIC"))
# importa dataset SIMULATED come Deruta -----------------------------------
all_sim=data.frame(fread("data/parent_sampled_as_deruta.csv",stringsAsFactors = T))
# importa dataset SIMULATED come Deruta -----------------------------------
all_sim=data.frame(fread("simulations/data/parent_sampled_as_deruta.csv",stringsAsFactors = T))
head(all_sim)
#la scala è a livello di GEMME dobbiamo portarla a livello NODO
#inseriamo la tipologia di gergmolio da cui deriva la gemma
all_sim$shoot_type = NA
all_sim[all_sim$fate!="S","shoot_type"]="PROLEPTIC"
all_sim[all_sim$fate=="S","shoot_type"]="SYLLEPTIC"
all_sim$shoot_type=factor(all_sim$shoot_type, levels = c("PROLEPTIC","SYLLEPTIC"))
#unifichiamo per rango nodo
all_sim = unique(all_sim[c("length_cm", "shoot_id","rank","shoot_type")])
head(all_sim)
# calcolo frequenze -------------------------------------------------------
names(all_sim) = names(real_shoot)
all_sim$sim = "Simulated"
real_shoot$sim = "Real"
unique_df = rbind(all_sim,real_shoot)
unique_df$sim = as.factor(unique_df$sim)
n = length(all_sim$shoot_ID)
freq = table(unique_df$sim,unique_df$shoot_type)
print(freq)
#prop and test
rel_freq = prop.table(freq,1)
rel_freq = as.matrix(rel_freq)
cols=palette()[1:nrow(rel_freq)]
syl = rel_freq[,2]
br = barplot(height = syl, ylim = c(0,1),xaxt = 'n', beside = T, col = c(cols),ylab = "proportion")
#test per differenze
freq = as.data.frame.matrix(freq)
freq$sum = rowSums(freq)
#are there differences between class length?
test=prop.test(freq[1:nrow(freq),2], freq[1:nrow(freq),ncol(freq)])
if (test$p.value<=0.05) {
lab = "*"
print(test)
}
if (test$p.value<=0.01){
lab = "**"
print(test)
}
if (test$p.value<=0.001){
lab = "***"
print(test)
}
if (test$p.value>0.05) {
lab = NA
print(test)
}
text(x = mean(br[,1]),y = mean(rel_freq[,2])+0.17,labels = lab, cex = 1.5)
legend("topright",legend = c("Observation", "576 simulations"), fill = c(cols))
library(janitor);library(readxl);library(dplyr)
shoot = read_excel("../Data/2020Inne_autor.xlsx",.name_repair = make_clean_names,sheet = "Own_rooted_young")
#AIM1:create a metamer level dataset
#AIM2: type of shoot (SYLLEPTIC or PROLEPTIC) where the metamer comes from
#AIM3:save a dataframe, at the metamer level, with just the shoots that were found in 2021
#author: Francesca Grisafi
#year: 2022
library(janitor);library(readxl);library(dplyr);library(plyr)
source("Cultivars/TondaGiffoniOR/Scripts/Modify_dataset/1_create_shootlevel_OR.R")
new_shoots = read_excel("Cultivars/TondaGiffoniOR/Data/2021Inne_autor.xlsx",.name_repair = make_clean_names,sheet = "2021DFAUTO")
new_shoots=data.frame(new_shoots)
str(new_shoots)
new_shoots$class=factor(new_shoots$class,levels = c("Sh","Me","Lo","VLo"))
names(new_shoots)
names(new_shoots)[c(18:24)]=c("nb_nodes_new", "c_new", "v_new", "m_new", "cic_new", "cl_new", "b_new")
new_shoots = dplyr::mutate(new_shoots, "tot_buds_m+v+b+c" = NA, .after = b_new)
new_shoots = dplyr::mutate(new_shoots, "nu_new" = NA, .after = cl_new)
new_shoots[new_shoots$length2yo==0, "length2yo"] = NA
start_col = grep("x2y_o_node$", colnames(new_shoots))
fin_col = grep("b_3$", colnames(new_shoots))
len_col = (fin_col-start_col)+1
#making the sum of nodes, #catkins,mixed,veg,blind,nuts,cluster per new_shoots
nline = length(new_shoots$shoot1yo)
rep = (ncol(new_shoots)-(start_col-1))/len_col
for (i in 1:nline) {
df = droplevels(new_shoots[i,])
nb_nodes = NA
nb_c = NA
nb_v = NA
nb_m = NA
nb_cl = NA
nb_nu = NA
nb_b = NA
start_col = grep("x2y_o_node$", colnames(new_shoots))
fin_col = grep("b_3$", colnames(new_shoots))
for (j in 1:rep) {
dt = df[start_col:fin_col]
print(dt)
if (!is.na(dt[1])){
nb_nodes = sum(nb_nodes , 1, na.rm = T)
}
if (!is.na(dt[2])) {
if (dt[2]==0){
nb_c = sum(nb_c, as.numeric(dt[2]), na.rm = T)
nb_v = sum(nb_v, as.numeric(dt[3]), na.rm = T)
nb_m = sum(nb_m, as.numeric(dt[4]), na.rm = T)
nb_cl = sum(nb_cl, as.numeric(dt[6]), na.rm = T)
nb_nu = sum(nb_nu, as.numeric(dt[7]), na.rm = T)
nb_b = sum(nb_b, as.numeric(dt[8]), na.rm = T)
}
if (dt[2]>0) {
nb_c = sum(nb_c, length(dt[2]), na.rm = T)
}
}
new_shoots[i,c("nb_nodes_new","c_new","v_new","m_new","cl_new","nu_new","b_new")]=c(nb_nodes, nb_c,nb_v,nb_m,nb_cl,nb_nu,nb_b)
start_col = fin_col + 1
fin_col = start_col + (len_col-1)
}
new_shoots[i, "tot_buds_m+v+b+c"] = sum(new_shoots[i, "c_new"],new_shoots[i, "v_new"],
new_shoots[i, "m_new"],new_shoots[i, "b_new"], na.rm = T)#sum of obs
}
str(new_shoots)
id=grep("shoot1yo", colnames(new_shoots))
tesi=grep("thesis", colnames(new_shoots))
class=grep("class", colnames(new_shoots))
new_shoots[c(id,tesi,class)] = lapply(new_shoots[c(id,tesi,class)], as.factor)
shoot_id=grep("^new_shoots", colnames(new_shoots))
colnames(new_shoots)[shoot_id]="shoot_ID"
str(new_shoots)
new_shoots$class=factor(new_shoots$class,levels = c("Sh","Me","Lo","VLo"))
new_shoots$fate=factor(new_shoots$fate,levels = c("C","V","M","B"))
# AIM1: duplicate rows according to number of nodes and adding node info --------
metamer = shoot[0, 0]
nline = length(shoot$shoot_ID)
names(shoot)
col_i = match("tesi",names(shoot))
col_f = match("node",names(shoot))
c=match("c",names(shoot))
b=match("b",names(shoot))
for (i in 1:nline) {
n = shoot$node[i]
for (rank_node in 1:n) {
s = shoot[col_i:col_f][i,]
st = paste0("c_", rank_node, "$")#store the rank node information
fin = paste0("b_", rank_node, "$")
col_st = grep(st, colnames(shoot))
col_fin = grep(fin, colnames(shoot))
s = cbind(s, rank_node, shoot[col_st:col_fin][i,])
s_i = grep(st, colnames(s))
s_f = grep(fin, colnames(s))
colnames(s)[s_i:s_f] = colnames(shoot)[c:b]
metamer = rbind.fill(metamer, s)
}
}
names(metamer)
node=match("node", colnames(metamer))
colnames(metamer)[node]= "Length(node)"
# change values of catkins into binary (present or not present)
metamer[metamer$c > 1, "c"] = 1
v=match("v",names(metamer))
m=match("m",names(metamer))
metamer = dplyr::mutate(metamer, "tot_buds_m.v.b.c" = NA, .after = b)
metamer$tot_buds_m.v.b.c = rowSums(metamer[c(c,v,m,b)])
# AIM1: create distance with the median rank (median rank=0) --------------------
metamer = dplyr::mutate(metamer, "median_distance" = NA, .after = rank_node)
names(metamer)
nshoot = unique(metamer$shoot_ID)
for (i in nshoot) {
s=metamer[metamer$shoot_ID==i,]
median=median(s$rank_node)
for (j in s$rank_node) {
metamer[metamer$shoot_ID==i&metamer$rank_node==j,"median_distance"]=j-median
}
}
metamer = dplyr::mutate(metamer, "abs_median_distance" = NA, .after = median_distance)#add new column for the distance
metamer$abs_median_distance = abs(metamer$median_distance)
metamer = dplyr::mutate(metamer, "abs_norm_median_distance" = NA, .before = abs_median_distance)#add new column for the distance
metamer$abs_norm_median_distance = round(metamer$abs_median_distance / metamer$`Length(node)`, digits = 2)
# AIM2: type of shoot (SYLLEPTIC or PROLEPTIC) where the metamer comes from -----------------------------------
metamer$shoot_type = NA
metamer[metamer$c!=0,"shoot_type"]="SYLLEPTIC"
metamer[metamer$c==0,"shoot_type"]="PROLEPTIC"
metamer$shoot_type=factor(metamer$shoot_type)
# AIM3: number of new shoots per each metamer -----------------------------------
metamer$nb_new_shoots = NA
#column names
for (i in unique(sort(new_shoots$shoot1yo))) {
new_met=new_shoots[new_shoots$shoot1yo==i,]
for (j in unique(new_met$rank1yo)) {
new_rank=new_met[new_met$rank1yo==j&(!is.na(new_met$fate)),]
nb=sum(new_rank$number_newshoot2yo,na.rm = T)
metamer[metamer$shoot_ID==i&metamer$rank_node==j,"nb_new_shoots"]=nb
}
}
names(shoot)
id=grep("id",names(shoot))
buds=grep("tot_buds_",names(shoot))
shoot=shoot[id:buds]
toremove <- grep("^shoot$|^metamer$|new_shoots", ls(), invert = TRUE, value = TRUE)
rm(list = c(toremove, "toremove"))
shoot$found_next_year= NA
#storing the position of some columns
names(metamer)
ne = grep("new", colnames(metamer))#column "new shoots"
fo = grep("^foun", colnames(shoot))#column "found"
nline = length(shoot$tesi)#number of line
#store, for each shoot, if it was found next year (tag did not felt down)
for (i in unique(shoot$shoot_ID)) {
n = max(metamer[metamer$shoot_ID == i, "nb_new_shoots"])
if (!is.na(n)) {
n = "YES"
}
else {
n = "NO"
}
shoot[shoot$shoot_ID == i, "found_next_year"] =n
}
shoot$found_next_year=factor(shoot$found_next_year)
toremove <- grep("^shoot$|^metamer$|new_shoots", ls(), invert = TRUE, value = TRUE)
rm(list = c(toremove, "toremove"))
met=metamer
print(sum(met$tot_buds_m.v.b.c,na.rm = T))#1871
print(sum(met$nb_new_shoots,na.rm = T))#988
# duplicate each row the number of times equal to total buds --------
bud <- met[0, 0]
nline = nrow(met[1])
for (i in 1:nline) {
x = met$tot_buds_m.v.b.c[i]
bud = rbind(bud, met[rep(i, each = x), ])
}
# remove those who had more than 1 shoot but i recorded just one bud --------
names(new_shoots)
length(new_shoots[is.na(new_shoots$fate), "fate"]) /length(new_shoots$fate)#2.4%
new_shoots = droplevels(new_shoots[!is.na(new_shoots$fate),])
names(new_shoots)
year=grep("year",names(new_shoots))
b=grep(".c$",names(new_shoots))
new_shoots = new_shoots[year:b]
# _create new df in which each line is a single bud -----------------------
bud = dplyr::mutate(bud, "fate" = NA, .after = tot_buds_m.v.b.c)
c_in=grep("unit_2",names(new_shoots))
c_fin=ncol(new_shoots)
bud[c((ncol(bud)+1):(ncol(bud)+(c_fin-c_in+1)))]=NA
names(bud)[(ncol(bud)-(c_fin-c_in)):ncol(bud)]=names(new_shoots)[c_in:c_fin]
bud.new=bud[0,0]
for (i in unique(sort(bud$shoot_ID))) {
bud.shoot=droplevels(bud[bud$shoot_ID==i,])
new.shoot=droplevels(new_shoots[new_shoots$shoot1yo==i,])
for (j in 1:max(bud.shoot$rank_node)) {
bud.rank=droplevels(bud.shoot[bud.shoot$rank_node==j,])
new.rank=droplevels(new.shoot[new.shoot$rank1yo==j,])
bud.rank$fate=toupper(rep(names(bud.rank[tolower(levels(new_shoots$fate))]),bud.rank[1,tolower(levels(new_shoots$fate))]))
for (q in 1:nrow(bud.rank)) {
if (bud.rank[q,tolower(bud.rank[q,"fate"])]!=0) {
bud.rank[q,tolower(bud.rank[q,"fate"])]=bud.rank[q,tolower(bud.rank[q,"fate"])]-1
}
}
fate=new.rank$fate
diff = match(new.rank$fate, bud.rank$fate)#position of fates (in "bud")
bud.rank[-(diff),"nb_new_shoots"]=0
if (length(fate)!=0) {
frequenz=data.frame(table(fate))
for (f in frequenz$fate) {
ripetiz=frequenz[frequenz$fate==f,"Freq"]
new=new.rank[new.rank$fate==f,"number_newshoot2yo"]
bud.rank[bud.rank$fate %in% f,][1:ripetiz,"nb_new_shoots"]=new
bud.rank[bud.rank$fate %in% f & bud.rank$nb_new_shoots!=0,(ncol(bud)-(c_fin-c_in)):ncol(bud)]=new.rank[new.rank$fate==f,c_in:c_fin]
}
}
bud.new=rbind(bud.new,bud.rank)
}
}
bud=bud.new
rm(bud.new)
names(bud)[grep("unit_2",names(bud))[2]]="unit_3"
bud = dplyr::mutate(bud, "siblings_mv" = NA, .after = tot_buds_m.v.b.c)
bud$siblings_mv = bud$m + bud$v
bud$fate=factor(bud$fate,levels = c("C","V","M","B"))
# keep the info regarding nuts and clusters just for one bud (remo --------
bud.new=bud[0,0]
for (i in unique(sort(bud$shoot_ID))) {
bud.shoot=droplevels(bud[bud$shoot_ID==i,])
for (j in 1:max(bud.shoot$rank_node)) {
bud.rank=droplevels(bud.shoot[bud.shoot$rank_node==j,])
diff = match("M", bud.rank$fate)#position of fates (in "bud")
if(!is.na(diff)){
bud.rank[-(diff),c("cl","nu")]=0
}
bud.rank[bud.rank$fate!="M",c("cl","nu") ]=NA
bud.new=rbind(bud.new,bud.rank)
}
}
bud=bud.new
toremove <- grep("^shoot$|^bud$|^met$", ls(), invert = TRUE, value = TRUE)
rm(list = c(toremove, "toremove"))
#add the nb of buds in SYLLEPTIC, NB NUTS, ETC
met[(ncol(met)+1):(ncol(met)+3)]=NA
c=match("c",names(met))
v=match("v",names(met))
m=match("m",names(met))
b=match("b",names(met))
names(met)[(ncol(met)-2):(ncol(met))]=paste0(names(met)[c(c,v,m)],"_syl")
names(met)[c]="sylleptic"
met[met$sylleptic!=0,(ncol(met)-2):(ncol(met))]=met[met$sylleptic!=0,c(c,v,m)]
met[met$sylleptic!=0,c(v,m)]=0
met$tot_buds_syl_m_v=met$m_syl+met$v_syl
tot_buds=grep("tot_buds_m.v.b.c",names(met))
names(met)[tot_buds]="tot_buds_mvb"
met$tot_buds_mvb=met$m+met$v+met$b
met = dplyr::mutate(met, "tot_buds_mv" = NA, .after = tot_buds_mvb)
met$tot_buds_mv=met$m+met$v
#gemme nei rami sillettici (c+v+m) a livello del germoglio
shoot = dplyr::mutate(shoot, "buds_in_sylleptic" = NA, .after = found_next_year)
for (i in shoot$shoot_ID) {
syl = sum(met[met$shoot_ID==i,(ncol(met)-2):(ncol(met))], na.rm = T)
shoot[shoot$shoot_ID == i, "buds_in_sylleptic"] = syl
nuts = sum(bud[bud$shoot_ID == i, "nu"],na.rm = T)
clust = sum(bud[bud$shoot_ID == i, "cl"],na.rm = T)
shoot[shoot$shoot_ID == i, "nu"] = nuts
shoot[shoot$shoot_ID == i, "cl"] = clust
for (j in unique(met$rank_node)) {
nuts = sum(bud[bud$shoot_ID == i & bud$rank_node==j, "nu"],na.rm = T)
clust = sum(bud[bud$shoot_ID == i & bud$rank_node==j, "cl"],na.rm = T)
met[met$shoot_ID == i& met$rank_node==j, "nu"] = nuts
met[met$shoot_ID == i& met$rank_node==j, "cl"] = clust
}
}
#add distance from median rank node
met = dplyr::mutate(met, "norm_median_distance" = NA, .after = median_distance)
met$norm_median_distance = round((met$median_distance /met$`Length(node)`),1)
bud$class=factor(bud$class,levels = c("Sh","Me","Lo","VLo"))
bud$length_newshoots = factor(bud$length_newshoots, c("Sh", "Me", "Lo", "VLo"))
foundnxtyr_bud_lev=bud[!is.na(bud$nb_new_shoots),]
foundnxtyr_shoot_lev=shoot[shoot$found_next_year=="YES",]
foundnxtyr_met_lev=met[!is.na(met$nb_new_shoots),]
# write.xlsx(bud, "Own_rooted_young/Data/alldata_OR.xlsx",row.names = F,sheetName = "bud_lev" )
# write.xlsx(shoot, "Own_rooted_young/Data/alldata_OR.xlsx",row.names = F,sheetName = "shoot_lev",append = T)
# write.xlsx(met, "Own_rooted_young/Data/alldata_OR.xlsx",row.names = F,sheetName = "met_lev",append = T)
#
#
# write.xlsx(foundnxtyr_bud_lev, "Own_rooted_young/Data/foundnxtyr_OR.xlsx",row.names = F,sheetName = "bud_lev")
# write.xlsx(foundnxtyr_shoot_lev, "Own_rooted_young/Data/foundnxtyr_OR.xlsx",row.names = F,sheetName = "shoot_lev",append = T)
# write.xlsx(foundnxtyr_met_lev, "Own_rooted_young/Data/foundnxtyr_OR.xlsx",row.names = F,sheetName = "met_lev",append = T)
toremove <- grep("^shoot$|^bud$|^met$|_lev$", ls(), invert = TRUE, value = TRUE)
rm(list = c(toremove, "toremove"))
met.all.proleptic=met
rm(bud,shoot,met)
bud=foundnxtyr_bud_lev
shoot=foundnxtyr_shoot_lev
met=foundnxtyr_met_lev
rm(foundnxtyr_bud_lev,foundnxtyr_shoot_lev,foundnxtyr_met_lev)
# sylleptic ---------------------------------------------------------------
#met level
met.all.sylleptic=droplevels(met.all.proleptic[met.all.proleptic$shoot_type=="SYLLEPTIC",])
names(met.all.sylleptic)
length=grep("length$",names(met.all.sylleptic))
length_no=grep("Length",names(met.all.sylleptic))
rank=grep("rank",names(met.all.sylleptic))
colnames(met.all.sylleptic)[c(length,length_no,rank)] = c("parent_length_cm",
"parent_length_node",
"parent_rank_node")
met.sylleptic=droplevels(met.all.sylleptic[!(is.na(met.all.sylleptic$nb_new_shoots)), ])
#bud level
bud.sylleptic=droplevels(bud[bud$shoot_type=="SYLLEPTIC",])
names(bud.sylleptic)
bud.sylleptic = dplyr::mutate(bud.sylleptic, "norm_median_distance" = NA, .after = median_distance)
bud.sylleptic$norm_median_distance = round((bud.sylleptic$median_distance /
bud.sylleptic$`Length(node)`),
1)
names(bud.sylleptic)
length=grep("length$",names(bud.sylleptic))
length_no=grep("Length",names(bud.sylleptic))
rank=grep("rank",names(bud.sylleptic))
colnames(bud.sylleptic)[c(length,length_no,rank)] = c("parent_length_cm",
"parent_length_node",
"parent_rank_node")
MV.bud.SYL = droplevels(bud.sylleptic[bud.sylleptic$fate == "M" |
bud.sylleptic$fate == "V", ])
MV.bud.SYL$fate = factor(MV.bud.SYL$fate, c("V", "M"))
# proleptic ---------------------------------------------------------------
#met level
met.proleptic=met
tot=grep("tot_buds_mvb",names(met))
c=grep("c_syl",names(met))
mv_s=grep("tot_buds_syl_m_v",names(met))
met$tot_buds_m_v_b_c=rowSums(met[c(tot,c,mv_s)],na.rm = T)
#bud level
bud.proleptic = droplevels(bud[bud$shoot_type == "PROLEPTIC", ])
colnames(bud.proleptic)
bud.proleptic$fate = factor(bud.proleptic$fate, c("V", "B", "M"))
str(bud.proleptic)
bud.proleptic$norm_median_distance = round((bud.proleptic$median_distance /
bud.proleptic$`Length(node)`),
1)
MV.bud.PRO = droplevels(bud.proleptic[bud.proleptic$fate == "M" |
bud.proleptic$fate == "V", ])
MV.bud.PRO$siblings_mvb = MV.bud.PRO$m + MV.bud.PRO$v + MV.bud.PRO$b
toremove <- grep("proleptic$|sylleptic$|PRO$|SYL$|shoot|^bud$|^met$", ls(), invert = TRUE, value = TRUE)
rm(list = c(toremove, "toremove"))
#write
fwrite(bud, "Cultivars/TondaGiffoniOR/Data/bud.csv")
library(janitor);library(readxl);library(dplyr);library(data.table)
met.all.proleptic=met
rm(bud,shoot,met)
bud=foundnxtyr_bud_lev
met[(ncol(met)+1):(ncol(met)+3)]=NA
source("Cultivars/TondaGiffoniOR/Scripts/Modify_dataset/4_create_bude_level_OR.R")
met.all.proleptic=met
rm(bud,shoot,met)
bud=foundnxtyr_bud_lev
#AIM: split the dataframes into proleptic and sylleptic & modify proleptic
#data=shoots found in 2021 (Deruta)
#Phd=Francesca Grisafi
library(janitor);library(readxl);library(dplyr);library(data.table)
source("Cultivars/TondaGiffoniOR/Scripts/Modify_dataset/5_modify_shoot&met_level_OR.R")
met.all.proleptic=met
rm(bud,shoot,met)
bud=foundnxtyr_bud_lev
shoot=foundnxtyr_shoot_lev
met=foundnxtyr_met_lev
rm(foundnxtyr_bud_lev,foundnxtyr_shoot_lev,foundnxtyr_met_lev)
# sylleptic ---------------------------------------------------------------
#met level
met.all.sylleptic=droplevels(met.all.proleptic[met.all.proleptic$shoot_type=="SYLLEPTIC",])
names(met.all.sylleptic)
length=grep("length$",names(met.all.sylleptic))
length_no=grep("Length",names(met.all.sylleptic))
rank=grep("rank",names(met.all.sylleptic))
colnames(met.all.sylleptic)[c(length,length_no,rank)] = c("parent_length_cm",
"parent_length_node",
"parent_rank_node")
met.sylleptic=droplevels(met.all.sylleptic[!(is.na(met.all.sylleptic$nb_new_shoots)), ])
#bud level
bud.sylleptic=droplevels(bud[bud$shoot_type=="SYLLEPTIC",])
names(bud.sylleptic)
bud.sylleptic = dplyr::mutate(bud.sylleptic, "norm_median_distance" = NA, .after = median_distance)
bud.sylleptic$norm_median_distance = round((bud.sylleptic$median_distance /
bud.sylleptic$`Length(node)`),
1)
names(bud.sylleptic)
length=grep("length$",names(bud.sylleptic))
length_no=grep("Length",names(bud.sylleptic))
rank=grep("rank",names(bud.sylleptic))
colnames(bud.sylleptic)[c(length,length_no,rank)] = c("parent_length_cm",
"parent_length_node",
"parent_rank_node")
MV.bud.SYL = droplevels(bud.sylleptic[bud.sylleptic$fate == "M" |
bud.sylleptic$fate == "V", ])
MV.bud.SYL$fate = factor(MV.bud.SYL$fate, c("V", "M"))
# proleptic ---------------------------------------------------------------
#met level
met.proleptic=met
tot=grep("tot_buds_mvb",names(met))
c=grep("c_syl",names(met))
mv_s=grep("tot_buds_syl_m_v",names(met))
met$tot_buds_m_v_b_c=rowSums(met[c(tot,c,mv_s)],na.rm = T)
#bud level
bud.proleptic = droplevels(bud[bud$shoot_type == "PROLEPTIC", ])
colnames(bud.proleptic)
bud.proleptic$fate = factor(bud.proleptic$fate, c("V", "B", "M"))
str(bud.proleptic)
bud.proleptic$norm_median_distance = round((bud.proleptic$median_distance /
bud.proleptic$`Length(node)`),
1)
MV.bud.PRO = droplevels(bud.proleptic[bud.proleptic$fate == "M" |
bud.proleptic$fate == "V", ])
MV.bud.PRO$siblings_mvb = MV.bud.PRO$m + MV.bud.PRO$v + MV.bud.PRO$b
toremove <- grep("proleptic$|sylleptic$|PRO$|SYL$|shoot|^bud$|^met$", ls(), invert = TRUE, value = TRUE)
rm(list = c(toremove, "toremove"))
#write
fwrite(bud, "Cultivars/TondaGiffoniOR/Data/bud.csv")
fwrite(bud.proleptic, "Cultivars/TondaGiffoniOR/Data/bud_proleptic.csv")
fwrite(bud.sylleptic, "Cultivars/TondaGiffoniOR/Data/bud_sylleptic.csv")
fwrite(met, "Cultivars/TondaGiffoniOR/Data/met_proleptic.csv")
fwrite(met.sylleptic, "Cultivars/TondaGiffoniOR/Data/met_sylleptic.csv")
fwrite(met.all.sylleptic, "Cultivars/TondaGiffoniOR/Data/all_met_sylleptic.csv")
fwrite(met.all.proleptic, "Cultivars/TondaGiffoniOR/Data/all_met_proleptic.csv")
fwrite(MV.bud.PRO, "Cultivars/TondaGiffoniOR/Data/MV_bud_pro.csv")
fwrite(MV.bud.SYL, "Cultivars/TondaGiffoniOR/Data/MV_bud_syl.csv")
fwrite(shoot, "Cultivars/TondaGiffoniOR/Data/shoot.csv")
