#               pch=19,
#               col=cols[1]))
# #predict fateM:m with nb_v=0
# with(M_m,lines(x=seq(0,5),
#                lwd=2,
#                y=predict(model,
#                          newdata = data.frame("fate"="M", "m"=seq(0,5),
#                                               "v"=0),
#                          type="response"),col="red"))
# #predict fateM:m with nb_v=mean(v)
# with(M_m,lines(x=seq(0,5),
#                lwd=2,
#                y=predict(model,
#                          newdata = data.frame("fate"="M", "m"=seq(0,5),
#                                               "v"=mean(M$v)),
#                          type="response"),col="blue"))
# #predict fateM:m with a glm that not considers nb_v
# with(M_m,lines(x=seq(0,5),
#                lwd=2,
#                y=predict(mod1,
#                          newdata = data.frame("fate"="M", "m"=seq(0,5)),
#                          type="response"),col="black"))
# with(V_m,points(V_m$new.shoots~rownames(V_m), pch=19,
#                 ylim=c(0,1),
#                 col=cols[2]))
# #predict fateV:m with nb_v=0
# with(V_m,lines(x=seq(0,5),
#                lwd=2,
#                y=predict(model,
#                          newdata = data.frame("fate"="V", "m"=seq(0,5),
#                                               "v"=0),
#                          type="response"),col="red"))
# #predict fateV:m with nb_v=mean(v)
# with(V_m,lines(x=seq(0,5),
#                lwd=2,
#                y=predict(model,
#                          newdata = data.frame("fate"="V", "m"=seq(0,5),
#                                               "v"=mean(V$v)),
#                          type="response"),col="blue"))
# #predict fateV:m with a glm that not considers nb_v
# with(V_m,lines(x=seq(0,5),
#                lwd=2,
#                y=predict(mod1,
#                          newdata = data.frame("fate"="V", "m"=seq(0,5)),
#                          type="response"),col="black"))
# legend("top", horiz = T, legend=c("fate M", "fate V"), pch=c(19,19),col=cols[c(1,2)], cex=0.8)
# with(M_m, legend("bottomleft", horiz = F,
#                  legend=c("otherV=0", "otherV=mean(otherV)", "newglm !othrerV"),
#                  pch=c(19,19,19),col=c("red", "blue", "black"), cex=0.5))
# par(mar=c(5,0,1,4)+0.1)
# with(M_v,plot(new.shoots~rownames(M_v), ylim=c(0,1),
#               ylab=NA,
#               xlab="other V buds",pch=19,
#               yaxt='n',
#               col=cols[1]))
# # predict fateM:v with nb_m=0
# with(M_v,lines(x=seq(0,5),
#                lwd=2,
#                col="red",
#                y=predict(model, newdata = data.frame("fate"="M", "m"=0, "v"=seq(0,5)),
#                          type="response")))
# # predict fateM:v with nb_m=mean(m)
# with(M_v,lines(x=seq(0,5),
#                lwd=2,
#                y=predict(model,
#                          newdata = data.frame("fate"="M", "v"=seq(0,5),
#                                               "m"=mean(M$m)),
#                          type="response"),col="blue"))
# # predict fateM:v with a glm that not considers nb_m
# with(M_v,lines(x=seq(0,5),
#                lwd=2,
#                y=predict(mod2,
#                          newdata = data.frame("fate"="M", "v"=seq(0,5)),
#                          type="response"),col="black"))
# with(V_v,points(new.shoots~rownames(V_v), pch=19,
#                 col=cols[2],
#                 ylim=c(0,1)))
# # predict fateV:v with nb_m=0
# with(V_v,lines(x=seq(0,5),
#                lwd=2,
#                col="red",
#                y=predict(model, newdata = data.frame("fate"="V", "m"=0, "v"=seq(0,5)),
#                          type="response")))
# # predict fateV:v with nb_m=mean(m)
# with(V_v,lines(x=seq(0,5),
#                lwd=2,
#                y=predict(model,
#                          newdata = data.frame("fate"="V", "v"=seq(0,5),
#                                               "m"=mean(V$m)),
#                          type="response"),col="blue"))
# # predict fateV:v with a glm that not considers nb_m
# with(V_v,lines(x=seq(0,5),
#                lwd=2,
#                y=predict(mod2,
#                          newdata = data.frame("fate"="V", "v"=seq(0,5)),
#                          type="response"),col="black"))
# with(M_m, legend("bottomleft", horiz = F,
#                  legend=c("otherM=0", "otherM=mean(otherM)", "newglm !othrerM"),
#                  pch=c(19,19,19),col=c("red", "blue", "black"), cex=0.5))
# legend("top", horiz = T, legend=c("fate M", "fate V"), pch=c(19,19),col=cols[c(1,2)], cex=0.8)
# dev.off()
#AIM: proportion of new shoots from buds from proleptic buds
#data: DERUTA 2020
#PhD: Francesca Grisafi
source("Scripts/Modify_dataset/import_dataset.R")
#model1
model = glm(
presence_new_shoots ~ rank_node+Length+siblings_mv+fate+median_distance_norm,
family = "binomial",
data = MV.bud.PRO
)
summary(model)
#AIM: nb buds of V and M in sylleptic shoots
#data: DERUTA 2020
#PhD: Francesca Grisafi
source("Scripts/Modify_dataset/import_dataset.R")
source("Scripts/GLMs/Functions/permutation_glm.R")
names(MV.bud.SYL)
parameters = c("parent_length_cm","parent_rank_node","normal_distance", "siblings_mv","median_distance")
str(MV.bud.SYL$fate)#glm family binomial
MV.bud.SYL$fate=factor(MV.bud.SYL$fate, levels=c("M","V"))
#model1
model = glm(fate ~ parent_length_cm + parent_rank_node +
siblings_mv + normal_distance+median_distance,
family = "binomial",
data = MV.bud.SYL
)
summary(model)
#AIC:703.47
#remove normal_distance
parameters=parameters[-3]
#model2
model = glm(fate ~ parent_length_cm + parent_rank_node +
siblings_mv + median_distance,
family = "binomial",
data = MV.bud.SYL
)
summary(model)
#AIC:703.74
#remove length
parameters=parameters[-1]
#model3
model = glm(fate ~ parent_rank_node +
siblings_mv + median_distance,
family = "binomial",
data = MV.bud.SYL
)
summary(model)
#AIC:706.67
#permute median_distance
# permutation(dip = "fate",predictors = c("parent_rank_node","siblings_mv"),
# perm = "median_distance",data = MV.bud.SYL,family = "binomial")
#better perm= 33
#remove median_distance
parameters=parameters[-3]
#model5
model = glm(fate ~ siblings_mv,
family = "binomial",
data = MV.bud.SYL
)
summary(model)
#AIC:715.89
#permute siblings
permutation(dip = "fate",predictors = c(""),
perm = "siblings_mv",data = MV.bud.SYL,family = "binomial")
#better perm= 10
#remove siblings
parameters=parameters[-1]
#final model: NO MODEL but COMPUTE AVERAGE +- SE OF #M AND #V IN SYLLEPTIC
av=prop.table(table(MV.bud.SYL$fate))
#AIM: nb buds of V and M in sylleptic shoots
#data: DERUTA 2020
#PhD: Francesca Grisafi
source("Scripts/Modify_dataset/import_dataset.R")
source("Scripts/GLMs/Functions/permutation_glm.R")
names(MV.bud.SYL)
parameters = c("parent_length_cm","parent_rank_node","normal_distance", "siblings_mv","median_distance")
str(MV.bud.SYL$fate)#glm family binomial
MV.bud.SYL$fate=factor(MV.bud.SYL$fate, levels=c("M","V"))
#model1
model = glm(fate ~ parent_length_cm + parent_rank_node +
siblings_mv + normal_distance+median_distance,
family = "binomial",
data = MV.bud.SYL
)
summary(model)
#AIC:703.47
#remove normal_distance
parameters=parameters[-3]
#model2
model = glm(fate ~ parent_length_cm + parent_rank_node +
siblings_mv + median_distance,
family = "binomial",
data = MV.bud.SYL
)
summary(model)
#AIC:703.74
#remove length
parameters=parameters[-1]
#model3
model = glm(fate ~ parent_rank_node +
siblings_mv + median_distance,
family = "binomial",
data = MV.bud.SYL
)
summary(model)
#AIC:706.67
#permute median_distance
# permutation(dip = "fate",predictors = c("parent_rank_node","siblings_mv"),
# perm = "median_distance",data = MV.bud.SYL,family = "binomial")
#better perm= 33
#remove median_distance
parameters=parameters[-3]
#model5
model = glm(fate ~ siblings_mv,
family = "binomial",
data = MV.bud.SYL
)
summary(model)
#AIC:715.89
#permute siblings
# permutation(dip = "fate",predictors = c(""),
#             perm = "siblings_mv",data = MV.bud.SYL,family = "binomial")
#better perm= 10
#remove siblings
parameters=parameters[-1]
#final model: NO MODEL but COMPUTE AVERAGE +- SE OF #M AND #V IN SYLLEPTIC
av=prop.table(table(MV.bud.SYL$fate))
#AIM: nb buds in sylleptic shoots
#data: DERUTA 2020
#PhD: Francesca Grisafi
source("Scripts/Modify_dataset/import_dataset.R")
source("Scripts/GLMs/Functions/permutation_glm.R")
source("Scripts/GLMs/Functions/shapleyplot.R")
library(ShapleyValue)
names(met.sylleptic)
parameters = c("parent_length_cm","parent_rank_node","normal_distance","distance_abs", "median_distance","median_distance_norm")
str(met.sylleptic$tot_buds_m.v)#glm family poisson
#model1
model = glm(
tot_buds_m.v ~ parent_length_cm + parent_rank_node +
normal_distance + distance_abs + median_distance+median_distance_norm,
family = "poisson",
data = met.sylleptic
)
summary(model)
#AIC: 775.97
#remove rank
parameters
parameters = parameters[-2]
#model2
model = glm(
tot_buds_m.v ~ parent_length_cm +
normal_distance + distance_abs + median_distance+median_distance_norm,
family = "poisson",
data = met.sylleptic
)
summary(model)
#AIC: 774.04
#remove distance_abs
parameters=parameters[-3]
#mode3
model = glm(
tot_buds_m.v ~ parent_length_cm +
normal_distance + median_distance+median_distance_norm,
family = "poisson",
data = met.sylleptic
)
summary(model)
#AIC: 772.34
#remove median distance norm
parameters=parameters[-4]
#model4
model = glm(
tot_buds_m.v ~ parent_length_cm +
normal_distance + median_distance,
family = "poisson",
data = met.sylleptic
)
summary(model)
#AIC: 771.6
#permute median distance
permutation(dip = "tot_buds_m.v",predictors = parameters[-3],perm = parameters[3],data = met.sylleptic,family = "poisson")
#better perm: 10
#remove median distance
parameters=parameters[-3]
#FINAL MODEL
model = glm(
tot_buds_m.v ~ parent_length_cm +
normal_distance,
family = "poisson",
data = met.sylleptic
)
summary(model)
#AIC: 777.47
#save outputs
out=capture.output(summary(model))
# cat("3_nb_buds_SYL", out, file="Outputs/Tables/3_nb_buds_SYL.txt", sep="\n")
#shapley to understand who affects more the model
shapley.plot(y_var = "tot_buds_m.v",x_var = c("parent_length_cm",
"normal_distance"),data =met.sylleptic )
#AIM: nb buds of V and M in sylleptic shoots
#data: DERUTA 2020
#PhD: Francesca Grisafi
source("Scripts/Modify_dataset/import_dataset.R")
source("Scripts/GLMs/Functions/permutation_glm.R")
names(MV.bud.SYL)
parameters = c("parent_length_cm","parent_rank_node","normal_distance", "siblings_mv","median_distance")
str(MV.bud.SYL$fate)#glm family binomial
MV.bud.SYL$fate=factor(MV.bud.SYL$fate, levels=c("M","V"))
#model1
model = glm(fate ~ parent_length_cm + parent_rank_node +
siblings_mv + normal_distance+median_distance,
family = "binomial",
data = MV.bud.SYL
)
summary(model)
#AIC:703.47
#remove normal_distance
parameters=parameters[-3]
#model2
model = glm(fate ~ parent_length_cm + parent_rank_node +
siblings_mv + median_distance,
family = "binomial",
data = MV.bud.SYL
)
summary(model)
#AIC:703.74
#remove length
parameters=parameters[-1]
#model3
model = glm(fate ~ parent_rank_node +
siblings_mv + median_distance,
family = "binomial",
data = MV.bud.SYL
)
summary(model)
#AIC:706.67
#permute median_distance
# permutation(dip = "fate",predictors = c("parent_rank_node","siblings_mv"),
# perm = "median_distance",data = MV.bud.SYL,family = "binomial")
#better perm= 33
#remove median_distance
parameters=parameters[-3]
#model5
model = glm(fate ~ siblings_mv,
family = "binomial",
data = MV.bud.SYL
)
summary(model)
#AIC:715.89
#permute siblings
# permutation(dip = "fate",predictors = c(""),
#             perm = "siblings_mv",data = MV.bud.SYL,family = "binomial")
#better perm= 10
#remove siblings
parameters=parameters[-1]
#final model: NO MODEL but COMPUTE AVERAGE +- SE OF #M AND #V IN SYLLEPTIC
av=prop.table(table(MV.bud.SYL$fate))
#AIM: nb buds in sylleptic shoots
#data: DERUTA 2020
#PhD: Francesca Grisafi
source("Scripts/Modify_dataset/import_dataset.R")
source("Scripts/GLMs/Functions/permutation_glm.R")
source("Scripts/GLMs/Functions/shapleyplot.R")
library(ShapleyValue)
names(met.sylleptic)
parameters = c("parent_length_cm","parent_rank_node","normal_distance","distance_abs", "median_distance","median_distance_norm")
str(met.sylleptic$tot_buds_m.v)#glm family poisson
#model1
model = glm(
tot_buds_m.v ~ parent_length_cm + parent_rank_node +
normal_distance + distance_abs + median_distance+median_distance_norm,
family = "poisson",
data = met.sylleptic
)
summary(model)
#AIC: 775.97
#remove rank
parameters
parameters = parameters[-2]
#model2
model = glm(
tot_buds_m.v ~ parent_length_cm +
normal_distance + distance_abs + median_distance+median_distance_norm,
family = "poisson",
data = met.sylleptic
)
summary(model)
#AIC: 774.04
#remove distance_abs
parameters=parameters[-3]
#mode3
model = glm(
tot_buds_m.v ~ parent_length_cm +
normal_distance + median_distance+median_distance_norm,
family = "poisson",
data = met.sylleptic
)
summary(model)
#AIC: 772.34
#remove median distance norm
parameters=parameters[-4]
#model4
model = glm(
tot_buds_m.v ~ parent_length_cm +
normal_distance + median_distance,
family = "poisson",
data = met.sylleptic
)
summary(model)
#AIC: 771.6
#permute median distance
# permutation(dip = "tot_buds_m.v",predictors = parameters[-3],perm = parameters[3],data = met.sylleptic,family = "poisson")
#better perm: 10
#remove median distance
parameters=parameters[-3]
#FINAL MODEL
model = glm(
tot_buds_m.v ~ parent_length_cm +
normal_distance,
family = "poisson",
data = met.sylleptic
)
summary(model)
#AIC: 777.47
#save outputs
out=capture.output(summary(model))
# cat("3_nb_buds_SYL", out, file="Outputs/Tables/3_nb_buds_SYL.txt", sep="\n")
#shapley to understand who affects more the model
shapley.plot(y_var = "tot_buds_m.v",x_var = c("parent_length_cm",
"normal_distance"),data =met.sylleptic )
View(met.sylleptic)
#AIM: length of new shoots from buds in proleptic buds
#data: DERUTA 2020
#PhD: Francesca Grisafi
source("Scripts/Modify_dataset/import_dataset.R")
MV.bud.PRO=MV.bud.PRO[!is.na(MV.bud.PRO$length2yo.cm.),]
MV.bud.PRO=MV.bud.PRO[!(MV.bud.PRO$fate=="M"&MV.bud.PRO$length2yo.cm.>20),]#outlier remove
str(MV.bud.PRO$length2yo.cm.)#gaussian family
names(MV.bud.PRO)
parameters = c("rank_node","fate",
"Length","distance_abs",
"siblings_mv","normal_distance","median_distance_norm")
#model1
model = glm(
length2yo.cm. ~ Length + rank_node + distance_abs +
median_distance_norm + siblings_mv + normal_distance + fate,
family = "gaussian",
data = MV.bud.PRO
)
summary(model)
#AIC:3336.9
#remove siblings
parameters=parameters[-5]
#model2
model = glm(
length2yo.cm. ~ Length + rank_node + distance_abs +
median_distance_norm + normal_distance + fate,
family = "gaussian",
data = MV.bud.PRO
)
summary(model)
#AIC:3335.3
#remove normal distance
parameters=parameters[-5]
#model3
model = glm(
length2yo.cm. ~ Length + rank_node + distance_abs +
median_distance_norm + fate,
family = "gaussian",
data = MV.bud.PRO
)
summary(model)
#AIC:3334.5
#remove rank
parameters=parameters[-1]
#model4
model = glm(
length2yo.cm. ~ Length + distance_abs +
median_distance_norm + fate,
family = "gaussian",
data = MV.bud.PRO
)
summary(model)
#AIC:3333
#remove distance
parameters=parameters[-3]
#model5
model = glm(
length2yo.cm. ~ Length +
median_distance_norm + fate,
family = "gaussian",
data = MV.bud.PRO
)
summary(model)
#AIC:3331.9
#interations
#final model
#model6
model = glm(
length2yo.cm. ~ Length:fate +
median_distance_norm:fate,
family = "gaussian",
data = MV.bud.PRO
)
summary(model)
#AIC:3288.7
#save outputs
out=capture.output(summary(model))
# cat("6_new_shoots_length_PRO", out, file="Outputs/Tables/6_new_shoots_length_PRO.txt", sep="\n")
View(MV.bud.PRO)
