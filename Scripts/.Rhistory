library(fitdistrplus)
MV.bud.SYL=MV.bud.SYL[!is.na(MV.bud.SYL$length2yo.cm.),]
str(MV.bud.SYL$length2yo.cm.)#gaussian family
names(MV.bud.SYL)
parameters = c("m","v","parent_rank_node","fate",
"parent_length_cm","abs_median_distance",
"siblings_mv","abs_norm_median_distance","norm_median_distance")
#model1
model = glm(length2yo.cm. ~  m + v +parent_rank_node+
fate +  parent_length_cm+abs_median_distance+
siblings_mv + abs_norm_median_distance+norm_median_distance,
family = "gaussian",
data = MV.bud.SYL
)
summary(model)
#AIC:1016.2
#remove siblings mv
parameters = parameters[-7]
#model2
model = glm(length2yo.cm. ~  m + v +parent_rank_node+
fate +  parent_length_cm+abs_median_distance+
abs_norm_median_distance+norm_median_distance,
family = "gaussian",
data = MV.bud.SYL
)
summary(model)
#AIC:1016.2
#remove abs_norm_median_distance
parameters = parameters[-7]
#model3
model = glm(length2yo.cm. ~  m + v +parent_rank_node+
fate +  parent_length_cm+abs_median_distance+
norm_median_distance,
family = "gaussian",
data = MV.bud.SYL
)
summary(model)
#AIC:1014.2
#remove v
parameters = parameters[-2]
#model4
model = glm(length2yo.cm. ~  m + parent_rank_node+
fate +  parent_length_cm+abs_median_distance+
norm_median_distance,
family = "gaussian",
data = MV.bud.SYL
)
summary(model)
#AIC:1012.4
#remove m
parameters = parameters[-1]
#model5
model = glm(length2yo.cm. ~  parent_rank_node+
fate +  parent_length_cm+abs_median_distance+
norm_median_distance,
family = "gaussian",
data = MV.bud.SYL
)
summary(model)
#AIC:1010.6
#remove abs_median_distance
parameters = parameters[-4]
#model6
model = glm(length2yo.cm. ~  parent_rank_node+
fate +  parent_length_cm+
norm_median_distance,
family = "gaussian",
data = MV.bud.SYL
)
summary(model)
#AIC:1009.4
#remove fate
parameters = parameters[-2]
#model7
model = glm(length2yo.cm. ~  parent_rank_node+
parent_length_cm+
norm_median_distance,
family = "gaussian",
data = MV.bud.SYL
)
summary(model)
#AIC:1008.4
#remove rank
parameters = parameters[-1]
#model8
model = glm(length2yo.cm. ~ parent_length_cm+
norm_median_distance,
family = "gaussian",
data = MV.bud.SYL
)
summary(model)
#AIC:1008.9
#remove norm_median_distance
parameters = parameters[-2]
#model9
model = glm(length2yo.cm. ~  parent_length_cm,
family = "gaussian",
data = MV.bud.SYL
)
summary(model)
#AIC:1007.5
#remove length
parameters = parameters[-1]
#BECAUSE NON OF THE MODEL WAS SATYISFING, AND BECAUSE THERE ARE NOT MUCH INFO ON SYLLEPTIC SHOOT,
#THE LENGTH OF NEW SHOOTS WILL BE PLOTTED AS DISTRIBUTION LENGTH
#find best dist
descdist(MV.bud.SYL$length2yo.cm., discrete = FALSE)
fit.weibull <- fitdist(MV.bud.SYL$length2yo.cm., "weibull")
fit.weibull$aic
#AIC:876.9911
plot(fit.weibull)
fit.gamma <- fitdist(MV.bud.SYL$length2yo.cm., "gamma")
fit.gamma$aic
#AIC:856.0129
plot(fit.gamma)
#save outputs
out=capture.output(summary(fit.gamma))
# cat("6_new_shoots_length_SYL", out, file="Outputs/Tables/6_new_shoots_length_SYL.txt", sep="\n")
#FINAL DISTRIBUTION: GAMMA DISTRIBUTION
#gamma has the best aic. exstracte gamma value for each shoot length
q = data.frame(
"x" = seq(0, max(MV.bud.SYL$length2yo.cm.), by = 0.1),
"y" = dgamma(
seq(0, max(MV.bud.SYL$length2yo.cm.), by = 0.1),
shape = fit.gamma$estimate[1],
rate = fit.gamma$estimate[2]
)
)
#histogram
h = hist(MV.bud.SYL$length2yo.cm., breaks = 10)
h$counts <- h$counts / sum(h$counts)
#graph
png("Outputs/Plots/6_SYL_length_dist.png",width=1200, height=900, res=150)# save plot
with(MV.bud.SYL, plot(h, main="from M or V(gamma dist)",
freq=T,
ylim=c(0,0.5),
ylab="relative frequency",
col="grey",
xlab = "Length new shoots (cm)"))
with(q,lines(y~x, type="l", lwd=2))
dev.off()
#logigram:MOD3
#AIM: length of new shoots from buds in sylleptic buds
#data: DERUTA 2020
#PhD: Francesca Grisafi
source("Scripts/Modify_dataset/import_dataset.R")
source("Scripts/GLMs/Functions/permutation_glm.R")
source("Scripts/GLMs/Functions/shapleyplot.R")
library(ShapleyValue)
library(fitdistrplus)
MV.bud.SYL=MV.bud.SYL[!is.na(MV.bud.SYL$length2yo.cm.),]
str(MV.bud.SYL$length2yo.cm.)#gaussian family
names(MV.bud.SYL)
parameters = c("m","v","parent_rank_node","fate",
"parent_length_cm","abs_median_distance",
"siblings_mv","abs_norm_median_distance","norm_median_distance")
#model1
model = glm(length2yo.cm. ~  m + v +parent_rank_node+
fate +  parent_length_cm+abs_median_distance+
siblings_mv + abs_norm_median_distance+norm_median_distance,
family = "gaussian",
data = MV.bud.SYL
)
summary(model)
#AIC:1016.2
#remove siblings mv
parameters = parameters[-7]
#model2
model = glm(length2yo.cm. ~  m + v +parent_rank_node+
fate +  parent_length_cm+abs_median_distance+
abs_norm_median_distance+norm_median_distance,
family = "gaussian",
data = MV.bud.SYL
)
summary(model)
#AIC:1016.2
#remove abs_norm_median_distance
parameters = parameters[-7]
#model3
model = glm(length2yo.cm. ~  m + v +parent_rank_node+
fate +  parent_length_cm+abs_median_distance+
norm_median_distance,
family = "gaussian",
data = MV.bud.SYL
)
summary(model)
#AIC:1014.2
#remove v
parameters = parameters[-2]
#model4
model = glm(length2yo.cm. ~  m + parent_rank_node+
fate +  parent_length_cm+abs_median_distance+
norm_median_distance,
family = "gaussian",
data = MV.bud.SYL
)
summary(model)
#AIC:1012.4
#remove m
parameters = parameters[-1]
#model5
model = glm(length2yo.cm. ~  parent_rank_node+
fate +  parent_length_cm+abs_median_distance+
norm_median_distance,
family = "gaussian",
data = MV.bud.SYL
)
summary(model)
#AIC:1010.6
#remove abs_median_distance
parameters = parameters[-4]
#model6
model = glm(length2yo.cm. ~  parent_rank_node+
fate +  parent_length_cm+
norm_median_distance,
family = "gaussian",
data = MV.bud.SYL
)
summary(model)
#AIC:1009.4
#remove fate
parameters = parameters[-2]
#model7
model = glm(length2yo.cm. ~  parent_rank_node+
parent_length_cm+
norm_median_distance,
family = "gaussian",
data = MV.bud.SYL
)
summary(model)
#AIC:1008.4
#remove rank
parameters = parameters[-1]
#model8
model = glm(length2yo.cm. ~ parent_length_cm+
norm_median_distance,
family = "gaussian",
data = MV.bud.SYL
)
summary(model)
#AIC:1008.9
#remove norm_median_distance
parameters = parameters[-2]
#model9
model = glm(length2yo.cm. ~  parent_length_cm,
family = "gaussian",
data = MV.bud.SYL
)
summary(model)
#AIC:1007.5
#remove length
parameters = parameters[-1]
#BECAUSE NON OF THE MODEL WAS SATYISFING, AND BECAUSE THERE ARE NOT MUCH INFO ON SYLLEPTIC SHOOT,
#THE LENGTH OF NEW SHOOTS WILL BE PLOTTED AS DISTRIBUTION LENGTH
#find best dist
descdist(MV.bud.SYL$length2yo.cm., discrete = FALSE)
fit.weibull <- fitdist(MV.bud.SYL$length2yo.cm., "weibull")
fit.weibull$aic
#AIC:876.9911
plot(fit.weibull)
fit.gamma <- fitdist(MV.bud.SYL$length2yo.cm., "gamma")
fit.gamma$aic
#AIC:856.0129
plot(fit.gamma)
#save outputs
out=capture.output(summary(fit.gamma))
cat("6_new_shoots_length_SYL", out, file="Outputs/Tables/6_new_shoots_length_SYL.txt", sep="\n")
#FINAL DISTRIBUTION: GAMMA DISTRIBUTION
#gamma has the best aic. exstracte gamma value for each shoot length
q = data.frame(
"x" = seq(0, max(MV.bud.SYL$length2yo.cm.), by = 0.1),
"y" = dgamma(
seq(0, max(MV.bud.SYL$length2yo.cm.), by = 0.1),
shape = fit.gamma$estimate[1],
rate = fit.gamma$estimate[2]
)
)
#histogram
h = hist(MV.bud.SYL$length2yo.cm., breaks = 10)
h$counts <- h$counts / sum(h$counts)
#graph
png("Outputs/Plots/6_SYL_length_dist.png",width=1200, height=900, res=150)# save plot
with(MV.bud.SYL, plot(h, main="from M or V(gamma dist)",
freq=T,
ylim=c(0,0.5),
ylab="relative frequency",
col="grey",
xlab = "Length new shoots (cm)"))
with(q,lines(y~x, type="l", lwd=2))
dev.off()
#logigram:MOD1
#AIM: probability of having a sylleptic shoot on that rank
#data: DERUTA 2020
#PhD: Francesca Grisafi
source("Scripts/Modify_dataset/import_dataset.R")
source("Scripts/GLMs/Functions/permutation_glm.R")
#according to exploratory
names(met)
parameters <- c("abs_norm_median_distance","median_distance","abs_median_distance", "norm_median_distance")#select intresting parameters
#the first term of factor is taken as "failure" the second as "succes"
str(met)#binomial
#model1
model= glm(
shoot_type ~abs_norm_median_distance + median_distance+abs_median_distance+ norm_median_distance,
family = "binomial",
data = met
)
summary(model)
#AIC:1038.7
#remove abs_median_distance
parameters =parameters[-3]
#model2
model= glm(
shoot_type ~abs_norm_median_distance + median_distance+ norm_median_distance,
family = "binomial",
data = met
)
summary(model)
#AIC:1038
#permute median_distance
# permutation(dip="shoot_type",predictors = parameters[-2],
#perm = parameters[2],family = "binomial",data = met)
#better permutations: 13>10
#remove median_distance
parameters =parameters[-2]
#model3
model= glm(
shoot_type ~abs_norm_median_distance + norm_median_distance,
family = "binomial",
data = met
)
summary(model)
#AIC:1045.9
#remove norm_median_distance
parameters=parameters[-2]
#FINAL MODEL
model= glm(
shoot_type ~abs_norm_median_distance,
family = "binomial",
data = met
)
summary(model)
#AIC:1046.8
#coefficient
print(coef(model))
#odds (succes/insucces)
print(exp(coef(model)))
#probabilities (odds/1+odds)
print(exp(coef(model)) / (1 + exp(coef(model))))
#save outputs
out=capture.output(summary(model))
cat("2_PRO_shoot_type", out, file="Outputs/Tables/2_PRO_shoot_type.txt", sep="\n")
#logigram:"how many buds?"
#AIM: nb buds in sylleptic shoots
#data: DERUTA 2020
#PhD: Francesca Grisafi
source("Scripts/Modify_dataset/import_dataset.R")
source("Scripts/GLMs/Functions/permutation_glm.R")
source("Scripts/GLMs/Functions/shapleyplot.R")
library(ShapleyValue)
names(met.sylleptic)
parameters = c("parent_length_cm","parent_rank_node","abs_norm_median_distance","abs_median_distance", "median_distance","norm_median_distance")
str(met.sylleptic$tot_buds_m.v)#glm family poisson
#model1
model = glm(
tot_buds_m.v ~ parent_length_cm + parent_rank_node +
abs_norm_median_distance + abs_median_distance + median_distance+norm_median_distance,
family = "poisson",
data = met.sylleptic
)
summary(model)
#AIC: 775.97
#remove rank
parameters
parameters = parameters[-2]
#model2
model = glm(
tot_buds_m.v ~ parent_length_cm +
abs_norm_median_distance + abs_median_distance + median_distance+norm_median_distance,
family = "poisson",
data = met.sylleptic
)
summary(model)
#AIC: 774.04
#remove abs_median_distance
parameters=parameters[-3]
#mode3
model = glm(
tot_buds_m.v ~ parent_length_cm +
abs_norm_median_distance + median_distance+norm_median_distance,
family = "poisson",
data = met.sylleptic
)
summary(model)
#AIC: 772.34
#remove median distance norm
parameters=parameters[-4]
#model4
model = glm(
tot_buds_m.v ~ parent_length_cm +
abs_norm_median_distance + median_distance,
family = "poisson",
data = met.sylleptic
)
summary(model)
#AIC: 771.6
#permute median distance
# permutation(dip = "tot_buds_m.v",predictors = parameters[-3],perm = parameters[3],data = met.sylleptic,family = "poisson")
#better perm: 10
#remove median distance
parameters=parameters[-3]
#FINAL MODEL
model = glm(
tot_buds_m.v ~ parent_length_cm +
abs_norm_median_distance,
family = "poisson",
data = met.sylleptic
)
summary(model)
#AIC: 777.47
#coefficient
print(coef(model))
#odds (succes/insucces)
print(exp(coef(model)))
#save outputs
out=capture.output(summary(model))
cat("3_nb_buds_SYL", out, file="Outputs/Tables/3_nb_buds_SYL.txt", sep="\n")
#shapley to understand who affects more the model
shapley.plot(y_var = "tot_buds_m.v",x_var = c("parent_length_cm",
"abs_norm_median_distance"),data =met.sylleptic )
#logigram:MOD5
#AIM: proportion of new shoots from buds from proleptic buds
#data: DERUTA 2020
#PhD: Francesca Grisafi
source("Scripts/Modify_dataset/import_dataset.R")
source("Scripts/GLMs/Functions/permutation_glm.R")
source("Scripts/GLMs/Functions/shapleyplot.R")
library(ShapleyValue)
names(MV.bud.PRO)
str(MV.bud.PRO)#binomial
MV.bud.PRO$nb_new_shoots=factor(MV.bud.PRO$nb_new_shoots)
parameters = c("rank_node", "Length","siblings_mv","fate","norm_median_distance")
#model1
model = glm(
nb_new_shoots ~ rank_node+Length+siblings_mv+fate+norm_median_distance,
family = "binomial",
data = MV.bud.PRO
)
summary(model)
#AIC:599.27
#permute rank
# permutation(dip = "nb_new_shoots",predictors = parameters[-1],perm = parameters[1],data = MV.bud.PRO,family = "binomial")
#better perm: 22>10
#remove rank
parameters=parameters[-1]
#model2
model = glm(
nb_new_shoots ~ Length+siblings_mv+fate+norm_median_distance,
family = "binomial",
data = MV.bud.PRO
)
summary(model)
#AIC:606.53
#permute length
# permutation(dip = "nb_new_shoots",predictors = parameters[-1],perm = parameters[1],data = MV.bud.PRO,family = "binomial")
#better perm: 33>10
#remove length
parameters=parameters[-1]
#model3
model = glm(
nb_new_shoots ~ siblings_mv+fate+norm_median_distance,
family = "binomial",
data = MV.bud.PRO
)
summary(model)
#AIC:613.48
#try with interactions
#model4
model = glm(
nb_new_shoots ~ siblings_mv*fate+norm_median_distance*fate,
family = "binomial",
data = MV.bud.PRO
)
summary(model)
#AIC:613.84
#model5
model = glm(
nb_new_shoots ~ siblings_mv*fate+norm_median_distance,
family = "binomial",
data = MV.bud.PRO
)
summary(model)
#AIC:612.12
#FINAL MODEL
model = glm(
nb_new_shoots ~ siblings_mv:fate+norm_median_distance:fate,
family = "binomial",
data = MV.bud.PRO
)
summary(model)
#AIC:629.75
#coefficient
print(coef(model))
#odds (succes/insucces)
print(exp(coef(model)))
#probabilities (odds/1+odds)
print(exp(coef(model)) / (1 + exp(coef(model))))
head(MV.bud.PRO)
str(MV.bud.PRO)
#save outputs
out=capture.output(summary(model))
cat("5_proba_new_shoots_PRO", out, file="Outputs/Tables/5_proba_new_shoots_PRO.txt", sep="\n")
