#import library from python
from numpy.random import *
from math import *
import random
import numpy

#variable to stop the random simulations
seed(SEED)

trunklength = 70.
mixedinternodelength = 0.5

#function for the relationship between length in cm and length in nodes
def shootnbnodesfromlength(length):
  return int (1.81062*(length**0.57449))

#probability to have sylleptic (box1)
def has_sylleptic_proba(rank_to_mid):
   ec = exp(-0.4315-0.2672*rank_to_mid)
   proba = ec/(1+ec)
   return proba

#binomial function for probability of having sylleptic(box1)
def has_sylleptic(rank_to_mid):
   proba = has_sylleptic_proba(rank_to_mid)
   return bool(binomial(1,proba,1)[0])

#SYLLEPTIC
#number of buds inside sylleptic shoots(box2)
def nb_mv_in_sylleptic_lambda(length, rank_to_mid):
  latent = 0.613354 + 0.016119 * length - 0.132113 * rank_to_mid
  return exp(latent)

#poisson function for number of buds inside sylleptic shoots(box2)
def nb_mv_in_sylleptic(length, rank_to_mid):
  lambda_ = nb_mv_in_sylleptic_lambda(length, rank_to_mid)
  return max(1,int(poisson(lambda_,1)[0]))

#probability of bursting in sylleptic shoots (box4)
def burst_in_sylleptic_proba(nb_siblings_V, nb_siblings_M, fate='V'):
  latent = 1.4002 -0.2140*nb_siblings_M-0.6422*nb_siblings_V #we utilize just significant values
  if fate == 'M': latent += -0.4511*nb_siblings_M +0.3876*nb_siblings_V
  ec = exp(latent)
  proba = ec/(1+ec)
  return proba

#binomial function for probability pf bursting inside sylleptic(box4)
def burst_in_sylleptic(nb_siblings_V, nb_siblings_M, fate='V'):
   proba = burst_in_sylleptic_proba(nb_siblings_V, nb_siblings_M, fate)
   return bool(binomial(1,proba,1)[0])
 
#number of nodes of new shoots(box5)
def nb_nodes_new_in_sylleptic(distance):  
  return int(3.35595+0.16892*distance)

#PROLEPTIC

#poisson function for number of buds in proleptic shoots(box2)
def nb_mvb_in_proleptic():
  proba = exp(0.11689)
  return max(1,int(poisson(proba,1)[0]))#when are more than 1, how can I do after to say that it is not blind node?

#bud type in proleptic shoots(box3)
def bud_type_in_proleptic_lambda(rank):
  name=["V","B","M"]
  nb_mvb=nb_mvb_in_proleptic()
  coefs = [0.,0.88245158-0.4245964*rank,-0.046528272+0.0327828*rank]
  probas = numpy.exp(coefs)/sum(numpy.exp(coefs))
  nbs = multinomial(nb_mvb,probas,1)[0]
  if nbs[1] > 0: return ["B"]
  else: 
    buds=nbs[0]*[name[0]]+nbs[2]*[name[2]]
    shuffle(buds)
    return buds

#probability of bursting in proleptic shoots (box4)
def burst_in_proleptic_proba(sibling, length, rank_to_mid, fate='V'):
  latent = 0.62131-0.59271*sibling+0.006484*length-0.40323*rank_to_mid#we utilize just significant values
  if fate == 'M': latent += -0.39303*sibling -0.02881*length+0.32563*rank_to_mid
  odd = exp(latent)
  proba = odd/(1+odd)
  return proba

#binomial function for probability pf bursting in proleptic(box4)
def burst_in_proleptic(sibling, length, rank_to_mid, fate='V'):
   proba = burst_in_proleptic_proba(sibling, length, rank_to_mid, fate='V')
   return bool(binomial(1,proba,1)[0])

#number of nodes of new shoots(box5)
def nb_nodes_new_in_proleptic(length, fate='V'):
  nb=2.391838+0.052294*length
  if fate =='M': nb +- 0.954729-0.029774*length
  return int(nb)

#APICALS
def apical_M():
  ec= exp(-0.2763)
  proba=ec/(1+ec)
  return bool(binomial(1,proba,1)[0])

def length_apicals(nb_nodes):
  nb=3.9455+0.1284*nb_nodes
  return int(nb)
  
#time
currenttime = 2021 #set a variable to start
lasttime = 2023 #set a variable to finisch

def StartEach():#new function that improve the timing
  global currenttime
  if getIterationNb() % 2 == 0 and getIterationNb() > 0: #Return the id of the current iteration.
    currenttime += 1

#we have to define the module we use
module ProlBud
module SylBud
module MixedBud
module Internode
module Nuts
module Catkin
module Leaf

#starter
Axiom: Info ProlBud(trunklength, currenttime, False)#false means that we take for granted that the first bud is vegetative

derivation length: (lasttime+1-currenttime)*2
production:

ProlBud(length, burstdate, mixed):#the starter shoot is proleptic
  if burstdate <= currenttime: 
    nbnodes = shootnbnodesfromlength(length)#number of nodes
    internodelength = length/nbnodes#internode length
    midrank = (nbnodes+1)/2#median rank
    for rank in range(1,nbnodes):#for each node
      nproduce /(180) Internode(internodelength)#draw an internode 
      rank_to_mid = abs(midrank-rank)#distqnce from the median node
      sylleptic = has_sylleptic(rank_to_mid)#is sylleptic?
      if sylleptic:
        syl_length = 3. #length of the sylleptic. what is the length of sylleptic?
        distance=rank_to_mid
        nb_mv = nb_mv_in_sylleptic(length, rank_to_mid)#number of buds in sylleptioc
        nproduce [&(60)f(0.3)Syl(syl_length, nb_mv,distance, burstdate) ]#disegna il sillettico
      else :
        nb_buds=nb_mvb_in_proleptic()#numero di gemme
        sibling=nb_buds-1#numero di gemme siblings oltre a 
        fate=bud_type_in_proleptic_lambda(rank)#gemme
        for ibud in fate:
          if ibud == 'B':
            nproduce [&(60)BlindNode()]
          else:
            nproduce /(360/len(fate)) #dividi di un angolo di 360 gradi!! lo devo cambiare perchè non è corretto
            if burst_in_proleptic(sibling, length, rank_to_mid, fate='V'):
              length = nb_nodes_new_in_proleptic(length, fate='V')
              if ibud =='V': #vegetative
                nproduce [-(60)f(0.5),(5)ProlBud(length,burstdate+1,False)]
              elif ibud == 'M':#mixed
                nproduce [-(60)f(0.5),(6)ProlBud(length,burstdate+1,True)]
    fate_apical=apical_M()
    length=length_apicals(nbnodes)
    nproduce /(180) Internode(internodelength)
    if fate_apical==True:
      nproduce [,(6)ProlBud(length,burstdate+1,True)]#se apicale è misto
    else:
      nproduce [,(5)ProlBud(length,burstdate+1,False)]#se apicale è vegetativo
    if mixed == True:
      nproduce Nuts(burstdate+1) #l'anno dopo nocciola
      
Syl(length, nb_mv,distance, burstdate):
  if burstdate <= currenttime:
    internodelength = length/(nb_mv+1)
    nb_v = int(ceil(nb_mv*0.55))#proportion of V in sylleptic shoots (box3)
    nb_m = (nb_mv-nb_v)#proportion of M in sylleptic shoots (box3)
    buds = ['V']*nb_v+['M']*nb_m#create a list as: VVMMVM
    shuffle(buds)#shuffle the list
    for b in buds:
      nproduce /(180) Internode(internodelength)#disegna un internodo
      if b == 'V': # Vegetative
        nproduce [-(60)f(0.5),(5)ProlBud(internodelength,burstdate+1,False)]
      elif b == 'M' : # Mixed
        nproduce [-(60)f(0.5),(6)ProlBud(internodelength,burstdate+1,True)]
    nproduce /(180) Internode(internodelength)Catkin
    
interpretation:

Info --> [@2D @M(0.8,0.8) @L(str(currenttime)+" "+str(getIterationNb()))]

Internode(l) --> ,(2)_(0.5)F(l,0.5)f(0.01)

Nuts(burstdate) -->_(0.2)F(1,0.22),(1)f(0.5)@O(0.5)

Leaf -->&(30)_(0.2),(2)F(1,0.22)@o(0.5)

Catkin --> _(0.3),(4) @Tp(0,0,-1) @Ts(0.2) nF(5,0.2)
BlindNode()-->f(0.01)
ProlBud(length, burstdate, mixed)-->@O(0.12)
endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	scalars = [('SEED', 'Integer', 17, 0, 100)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
